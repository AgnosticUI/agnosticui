---
  import AgButton from 'agnostic-astro/Button';
  import AgInput from 'agnostic-astro/Input';
  import AgCard from 'agnostic-astro/Card';
  import AgChoiceInput from 'agnostic-astro/ChoiceInput';

  const checkboxOptions = [{
    name: "tosAstro",
    value: "tosAstro",
    label: "I have read and agree to the terms of service."
  }];
---

<section>
  <div class="flex flex-column items-start">
    <!-- <div class="h4 mbe16">
      <img width="24" height="24" src="/assets/logo.svg" alt="Astro logo" class="mie12" />Astro
    </div> -->
    <p class="mbe16">This example signup form uses <a href="https://www.npmjs.com/package/agnostic-astro" target="_blank">agnostic-astro</a> for the UI primitives, and <a href="https://vestjs.dev/" target="_blank">Vest</a> for the form validation.</p>
  </div> 

  <AgCard class="card-demo" isStacked isShadow>
    <div class="h4">Signup</div>
    <form class="form">
      <AgInput
        id="uname-astro"
        name="usernameAstro"
        label="Username"
        autoComplete="usernameAstro"
      />
      <div class="mbs12"></div>
      <AgInput
        id="pword-astro"
        name="passwordAstro"
        type="password"
        label="Password"
        autoComplete="new-password"
      /> 
      <div class="mbs12"></div>
      <AgInput
        id="confirm-astro"
        name="confirmAstro"
        label="Confirm"
        type="password"
        autoComplete="new-password-confirm"
      />
      <div class="mbs12"></div>
      <AgChoiceInput
        id="agrees"
        type="checkbox"
        options={checkboxOptions}
        checkedOptions={[]}
        isFieldsetHidden={true}
        legendLabel="Terms of service"
      />
      <div class="mbs32"></div>
      <AgButton id="submit" type="submit" mode="primary" isRounded isBlock disabled>Submit</AgButton>
    </form>
  </AgCard>
</section>
<script>
  // TODO -- Need to add error hints
  // isInvalid={result.hasErrors('usernameAstro')}
  // invalidText={[...result.getErrors('usernameAstro')]}
  import suite from "./suiteAstro";

  let result = suite.get();
  let formState = {};

  let touchedInit = {
    tosAstro: false,
    usernameAstro: false,
    passwordAstro: false,
    confirmAstro: false,
  };
  let touched = touchedInit;
  let checked = [];

  const validate = (fieldName, value, force) => {
    const nextState = { ...formState, [fieldName]: value };
    if (touched[fieldName] || force) {
      const res = suite(nextState, fieldName);
      res.done(r => {
        const btn = document.querySelector('#submit');
        if (r.isValid()) {
          btn.removeAttribute('disabled');
        } else {
          btn.setAttribute('disabled', true);
        }
      })
    }
    formState = nextState;
  }

  /**
   * Blurring field makes it "touched" and candidate for validation
   */
  const handleBlur = fieldName => {
    if (!touched[fieldName]) {
      touched = {...touched, ...{ [fieldName]: true }};
      // First time this field is considered "touched" e.g. user just tab'd or clicked out
      // of the field. As such, we now need to validate said field for the first time!
      validate(fieldName, formState[fieldName], true);
    }
  }

  const handleCheckbox = (ev) => {
    // Since often user will simply click (not TAB then SPACE select
    // checked) we consider any interaction w/checkbox as now "touched"
    touched = { ...touched, ...{ tosAstro: true }};
    validate('tosAstro', !!ev.target.checked, true);
  }

  const handleChange = ({ target: { value, name } }) => {
    console.log('handleChange');
    validate(name, value);
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    validate();
  };

  document.addEventListener('DOMContentLoaded', () => {
    const username = document.querySelector('#uname-astro');
    const password = document.querySelector('#pword-astro');
    const confirm = document.querySelector('#confirm-astro');
    const submitButton = document.querySelector('#submit');

    const form = document.querySelector('form');
    form.addEventListener('submit', handleSubmit);

    const agrees = document.querySelector('#agrees');
    agrees.addEventListener('change', handleCheckbox);

    // Change events
    [username, password, confirm].forEach(el => el.addEventListener('change', handleChange));

    // Blur events
    [username, password, confirm].forEach((element) => {
      element.addEventListener('blur', (ev) => {
        handleBlur(ev.target.name);
      });
    });
  });
</script>
<style>
.form {
  width: 80%;
}

.passwordEyeButton {
  opacity: 75%;
  transition: opacity var(--agnostic-timing-medium);
}

.passwordEyeButton svg {
  color: var(--neutral-x-dark);
}

.passwordEyeButton:hover {
  opacity: 100%;
}
</style>
