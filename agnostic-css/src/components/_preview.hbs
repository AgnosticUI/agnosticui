<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <link media="all"
        rel="stylesheet"
        href="{{ path '/css/common.min.css'}}">
  <link media="all"
        rel="stylesheet"
        href="{{ path '/css/components.min.css'}}">

  <link media="all"
        rel="stylesheet"
        href="{{ path '/css/demo-globals.css'}}">

  <title>Preview Layout</title>
  <style>
    /* these styles are purely demonstration related styles only */
    body {
      width: 90%;
      margin: 5rem auto;
      padding: 0;
      font-family: var(--agnostic-font-family);
    }

    .alert {
      margin-block-end: var(--fluid-16);
    }
    .alert p {
      margin-block-start: 0;
    }

    .stackedWrap {
      display: flex;
      flex-direction: column;
      margin-block-end: 0;
    }

    .stackedHeader {
      font-size: var(--agnostic-h4);
      margin: 0;
      line-height: 1.4;
      font-weight: 500;
    }

    .row .btn {
      margin-inline-end: var(--fluid-8);
    }

    section,
    .progressBar {
      margin-block-end: var(--fluid-24);
    }

    /**
    * Button Icons -- We've elected to consider button icons as dependency injected children,
    * so, in React that means they're just an arbitrary part of `{ children }`, in Svelte and
    * Vue they're just a part of the `<slot />`. Therefore, styling of these are left to the
    * consumer of AgnosticUI.
    */
    .btn-icon-left {
      margin-inline-end: var(--fluid-6);
    }

    .btn-icon-right {
      margin-inline-start: var(--fluid-6);
    }

    .demo-btn-icon {
      font-weight: 400;
    }

    .demo-icon {
      fill: var(--agnostic-light);
      width: 14px;
      height: 14px;
      opacity: 0.95;
    }


    /* Demo styles */
    body .card {
      margin-block-end: var(--fluid-32);
    }

    /* This is demo specific styling for a couple of the cards example's
    child content. The reusable cards stuff is all in card.css */
    .card-demo-tags {
      margin: 0 -8px;
    }

    .card-demo-tag {
      display: inline-block;
      margin: var(--fluid-8);
      font-size: var(--fluid-14);
      text-transform: uppercase;
      font-weight: 600;
      letter-spacing: 0.02em;
      color: var(--primary);
    }

    .card-demo-title {
      margin: 0;
      font-size: clamp(1.4em, 2.1vw, 2.1em);
      font-family: 'Roboto Slab', Helvetica, Arial, sans-serif;
    }

    .card-demo-title a {
      text-decoration: none;
      color: inherit;
    }

    .card-demo-metadata {
      margin: 0;
    }

    .card-demo-rating {
      font-size: var(--fluid-16);
      letter-spacing: 0.05em;
      color: var(--primary);
    }

    .card-demo-rating span {
      color: var(--agnostic-gray-dark);
    }

    .card-demo-votes {
      font-size: var(--fluid-14);
      font-style: italic;
      color: var(--agnostic-gray-mid-dark);
    }

    .card-row-demo {
      align-items: stretch;
    }

    .card-demo-image-wrap {
      display: flex;
      flex-wrap: wrap;
      align-items: center;
      position: relative;
      box-sizing: border-box;
      flex: 3 1 30ch;
      overflow: hidden;
      margin-block-start: 0;
    }

    /* This technique will help you, but please consider using <picture> and let a tool light
      Lighthouse guide you on how to optimize your images for each source media breakpoint */
    .card-demo-image-wrap img {
      max-width: 100%;
      min-height: 100%;
      width: auto;
      height: auto;
      object-fit: cover;
      object-position: 50% 50%;
    }

    .card-demo-content {
      padding: var(--fluid-16) var(--fluid-32);
      flex: 4 1 40ch;
    }
    .card-demo-content,
    .card-demo-content>p {
      margin-block-end: var(--fluid-16);
    }

    .card-demo-content,
    .card-demo-image-wrap {
      width: 100%;
    }

    /* Stacked uses normal flex defaults */
    .card-stacked .card-demo-content,
    .card-stacked .card-demo-image-wrap {
      flex: 1 1 auto;
      height: auto;
    }

    .card-demo-save {
      display: flex;
      align-items: center;
      padding: var(--fluid-6) var(--fluid-14) var(--fluid-6) var(--fluid-12);
      border-radius: var(--agnostic-card-border-radius, var(--agnostic-radius, 0.25rem));
      border: 2px solid currentColor;
      color: var(--primary);
      background: none;
      cursor: pointer;
      font-weight: bold;
    }

    .card-demo-save svg {
      margin-inline-end: var(--fluid-6);
    }

    /**
     * AgnosticUI does not offer a .cards-demo -- this is just an example of how
     * you may want to wrap a card to produce a row of cards with flexbox
     */
    .cards-demo {
      display: flex;
      align-items: center;
      justify-items: center;
      flex-wrap: wrap;
      margin-block-start: var(--fluid-32);
      margin-block-end: var(--fluid-32);
    }

    .cards-demo .card {
      flex: 1;
      padding: var(--fluid-24);
    }

    .cards-demo .card .btn {
      margin-inline-end: var(--fluid-16);
    }

    .cards-demo .card:not(:last-child) {
      margin-inline-end: var(--fluid-24);
    }

    @media only screen and (min-width: 576px) {
      body {
        width: 36rem;
      }

    }

    @media only screen and (min-width: 768px) {
      body {
        width: 40rem;
      }
    }

    @media only screen and (min-width: 992px) {
      body {
        width: 55rem;
      }
    }
  </style>
</head>

<body>
  <main>
    {{{ yield }}}
  </main>
<script defer
        src="https://cdn.jsdelivr.net/npm/a11y-dialog@7/dist/a11y-dialog.min.js"></script>
<script type="module"
        src="{{ path '/js/switch.js' }}"></script>
<script type="module"
        src="{{ path '/js/dialog.js' }}"></script>
</body>

</html>
