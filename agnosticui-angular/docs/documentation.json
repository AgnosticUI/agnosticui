{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-9f02e16e5f3a273ac30d186a178e9fb0",
            "file": "src/stories/ag/src/lib/button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ag-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button     div\n     *ngIf=\"getType !== 'faux'; else useFauxDiv\"\n     [type]=\"getType\"\n     (click)=\"handleClick.emit($event)\"\n     [disabled]=\"getDisabled\"\n     [class]=\"classes\"\n   >\n     <ng-container *ngTemplateOutlet=\"contentTpl\"></ng-container>\n   </button>\n   <ng-template #useFauxDiv>\n     <div [class]=\"classes\">\n       <ng-container *ngTemplateOutlet=\"contentTpl\"></ng-container>\n     </div>\n   </ng-template>\n   <!-- We have to grab projected ng-content and put in this template.\n     Then, we can reference it from the template outlets above -->\n   <ng-template #contentTpl>\n     <ng-content></ng-content>\n   </ng-template>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "css",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "string"
                },
                {
                    "name": "isBlank",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "boolean"
                },
                {
                    "name": "isBlock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "boolean"
                },
                {
                    "name": "isBordered",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "boolean"
                },
                {
                    "name": "isCircle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "boolean"
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": " | "
                },
                {
                    "name": "isRaised",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "boolean"
                },
                {
                    "name": "isRounded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "boolean"
                },
                {
                    "name": "isSkinned",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "boolean"
                },
                {
                    "name": "mode",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "\"primary\" | \"secondary\" | undefined"
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "\"small\" | \"medium\" | \"large\""
                },
                {
                    "name": "type",
                    "defaultValue": "'button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "\"button\" | \"reset\" | \"submit\" | \"faux\""
                }
            ],
            "outputsClass": [
                {
                    "name": "handleClick",
                    "defaultValue": "new EventEmitter<MouseEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'ag-button',\n  template: ` <button\n      div\n      *ngIf=\"getType !== 'faux'; else useFauxDiv\"\n      [type]=\"getType\"\n      (click)=\"handleClick.emit($event)\"\n      [disabled]=\"getDisabled\"\n      [class]=\"classes\"\n    >\n      <ng-container *ngTemplateOutlet=\"contentTpl\"></ng-container>\n    </button>\n    <ng-template #useFauxDiv>\n      <div [class]=\"classes\">\n        <ng-container *ngTemplateOutlet=\"contentTpl\"></ng-container>\n      </div>\n    </ng-template>\n    <!-- We have to grab projected ng-content and put in this template.\n      Then, we can reference it from the template outlets above -->\n    <ng-template #contentTpl>\n      <ng-content></ng-content>\n    </ng-template>`,\n  styleUrls: ['./button.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ButtonComponent {\n  @Input() mode: 'primary' | 'secondary' | undefined = undefined;\n  // Type `faux` will result in a div that \"looks like\" a button. Useful for tab buttons\n  // or similar that may be descendents of a focusable <li role=\"button\"... where it would\n  // throw an a11y error like: Ensure interactive controls are not nested\n  @Input() type?: 'button' | 'reset' | 'submit' | 'faux' = 'button';\n  @Input() size?: 'small' | 'medium' | 'large' = 'medium';\n  @Input() css?: string;\n  @Input() isDisabled?: true | false = false;\n  @Input() isSkinned?: boolean;\n  @Input() isBlank?: boolean;\n  @Input() isRaised?: boolean;\n  @Input() isCircle?: boolean;\n  @Input() isBlock?: boolean;\n  @Input() isBordered?: boolean;\n  @Input() isRounded?: boolean;\n  @Output() handleClick = new EventEmitter<MouseEvent>();\n\n  public get classes(): string {\n    const baseClass = this.isSkinned !== false ? `btn` : `btn-base`;\n    const modeClass = this.mode ? `btn-${this.mode}` : '';\n    const isBlankClass = this.isBlank === true ? 'btn-blank' : '';\n    const isBorderedClass = this.isBordered === true ? 'btn-bordered' : '';\n    const isRaisedClass = this.isRaised === true ? 'btn-raised' : '';\n    const isCircleClass = this.isCircle === true ? 'btn-circle' : '';\n    const isBlockClass = this.isBlock === true ? 'btn-block' : '';\n    const isRoundedClass = this.isRounded === true ? 'btn-rounded' : '';\n    const overrides = this.css ? `${this.css}` : '';\n    const sizeClass = this.size ? `btn-${this.size}` : 'btn-medium';\n\n    return [\n      baseClass,\n      modeClass,\n      isBlankClass,\n      sizeClass,\n      isBorderedClass,\n      isCircleClass,\n      isRoundedClass,\n      isRaisedClass,\n      isBlockClass,\n      overrides,\n    ].join(' ');\n  }\n\n  public get getDisabled(): boolean {\n    return this.isDisabled || false;\n  }\n\n  public get getType(): string {\n    return this.type ? this.type : 'button';\n  }\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/*\n* Base Button Style\n*\n* Please note that we have two versions of this:\n* `.btn` which encompasses both the base and skin styles\n* `.btn-base` and `btn-skin`.\n* The reason we've done this is to provide you with some convenience but\n* also flexibility. Most will just want to apply `.btn`. However, if the\n* base skin of the button does not work for you, another option is to only\n* apply `.btn-base` and then set your own \"button skin\".\n*/\n.btn-base,\n.btn {\n  /* TODO test this fallback override syntax is correct */\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  white-space: nowrap;\n  user-select: none;\n  appearance: none;\n  cursor: pointer;\n  box-sizing: border-box;\n  transition-property: all;\n  transition-duration: var(--agnosticui-timing-medium);\n}\n\n.btn-skin,\n.btn {\n  color: var(--agnosticui-btn-font-color, var(--agnosticui-dark));\n  background-color: var(--agnosticui-btn-bgcolor, var(--agnosticui-gray-light));\n  border-color: var(--agnosticui-btn-bgcolor, var(--agnosticui-gray-light));\n  /* seems like a reasonable default as chrome picks `outset` which results in a weird 3d effect */\n  border-style: solid;\n  border-width: var(--agnosticui-btn-border-size, 1px);\n  font-family: var(--agnosticui-btn-font-family, var(--agnosticui-font-family));\n  font-weight: var(--agnosticui-btn-font-weight, 400);\n  font-size: var(--agnosticui-btn-font-size, 1rem);\n  /* this can be overriden, but it might mess with the balance of the button heights across variants */\n  line-height: var(--agnosticui-line-height, 1.25rem);\n  padding-block-start: var(--agnosticui-vertical-pad, 0.5rem);\n  padding-block-end: var(--agnosticui-vertical-pad, 0.5rem);\n  padding-inline-start: var(--agnosticui-side-padding, 0.75rem);\n  padding-inline-end: var(--agnosticui-side-padding, 0.75rem);\n  text-decoration: none;\n  text-align: center;\n  outline: none;\n}\n\n.btn:visited {\n  color: var(--agnosticui-btn-font-color, var(--agnosticui-dark));\n}\n\n.btn:hover {\n  opacity: 0.85;\n  text-decoration: none;\n}\n\n.btn:active {\n  text-shadow: 0 1px 0 rgba(255, 255, 255, 0.3);\n  text-decoration: none;\n  transition-duration: 0s;\n  box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.2);\n}\n\n.btn:focus {\n  box-shadow: 0 0 0 3px var(--agnosticui-focus-ring-color);\n  /* Needed for High Contrast mode */\n  outline: 3px solid transparent;\n  transition: box-shadow var(--agnosticui-timing-fast) ease-out;\n}\n\n/*\n* Disabled State\n*\n* The disabled state uses the class .disabled, is-disabled,\n* and the form attribute disabled=\"disabled\".\n* The use of !important is only added because this is a state\n* that must be applied to all buttons when in a disabled state.\n*/\n.btn.disabled,\n.btn:disabled {\n  top: 0 !important;\n  background: var(--agnosticui-btn-disabled-bg, var(--agnosticui-gray-mid-dark)) !important;\n  text-shadow: 0 1px 1px rgba(255, 255, 255, 1) !important;\n  /* primary, secondary, natural, all look same when disabled; and we don't want to\n  have an inadvertant looking blue primary border when disabled so it's transparent */\n  border-color: transparent;\n  color: var(--agnosticui-btn-disabled-color, var(--agnosticui-gray-dark)) !important;\n  cursor: default !important;\n  appearance: none !important;\n  box-shadow: none !important;\n  opacity: 0.8 !important;\n}\n\n.btn-primary {\n  background-color: var(--agnosticui-btn-primary, var(--agnosticui-primary));\n  border-color: var(--agnosticui-btn-primary, var(--agnosticui-primary));\n  color: var(--agnosticui-btn-primary-color, var(--agnosticui-light));\n}\n\n/* Border and font is primary. When hovered, we invert with primary background and white font */\n.btn-primary.btn-bordered {\n  color: var(--agnosticui-btn-primary, var(--agnosticui-primary));\n}\n.btn-primary.btn-bordered:hover,\n.btn-primary.btn-bordered:focus {\n  background-color: var(--agnosticui-btn-primary, var(--agnosticui-primary));\n  color: var(--agnosticui-btn-primary-color, var(--agnosticui-light));\n}\n\n.btn-primary:visited {\n  color: var(--agnosticui-btn-primary-color, var(--agnosticui-light));\n}\n\n.btn-secondary {\n  background-color: var(--agnosticui-btn-secondary, var(--agnosticui-secondary));\n  border-color: var(--agnosticui-btn-secondary, var(--agnosticui-secondary));\n  color: var(--agnosticui-btn-secondary-color, var(--agnosticui-light));\n}\n\n/* Border and font is secondary. When hovered, we invert with secondary background and white font */\n.btn-secondary.btn-bordered {\n  color: var(--agnosticui-btn-secondary, var(--agnosticui-secondary));\n}\n.btn-secondary.btn-bordered:hover,\n.btn-secondary.btn-bordered:focus {\n  background-color: var(--agnosticui-btn-secondary, var(--agnosticui-secondary));\n  color: var(--agnosticui-btn-secondary-color, var(--agnosticui-light));\n}\n\n.btn-secondary:visited {\n  color: var(--agnosticui-btn-secondary-color, var(--agnosticui-light));\n}\n\n/*\n* Raised Buttons\n*\n* A classic looking button that offers\n* great depth and affordance.\n*/\n.btn-raised {\n  border-color: var(--agnosticui-btn-bgcolor, var(--agnosticui-gray-light));\n  border-style: solid;\n  background: -webkit-gradient(linear, left top, left bottom, from(#f6f6f6), to(#e1e1e1));\n  /* Note that while one can customize some of these slightly, we essentially have hard-coded\n  box shadow rgba values so they can't really do so drastically which is probably fine :) */\n  background: linear-gradient(\n    var(--agnosticui-btn-raised-from, var(--agnosticui-gray-mid)),\n    var(--agnosticui-btn-raised-to, var(--agnosticui-gray-extra-light))\n  );\n  -webkit-box-shadow: inset 0px 1px 0px rgba(255, 255, 255, 0.3), 0 1px 2px rgba(0, 0, 0, 0.15);\n  box-shadow: inset 0px 1px 0px rgba(255, 255, 255, 0.3), 0 1px 2px rgba(0, 0, 0, 0.15);\n}\n.btn-raised:hover,\n.btn-raised:focus {\n  background: -webkit-gradient(linear, left top, left bottom, from(white), to(gainsboro));\n  background: linear-gradient(to bottom, white, gainsboro);\n}\n.btn-raised.active {\n  /* TODO -- maybe this shouldn't be hard coded */\n  background: #eeeeee;\n  -webkit-box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.2), 0px 1px 0px white;\n  box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.2), 0px 1px 0px white;\n}\n\n/*\n* Raised Primary Buttons\n*/\n.btn-raised.btn-primary {\n  border-color: var(--agnosticui-btn-primary-raised-to, var(--agnosticui-primary-from));\n  background: -webkit-gradient(\n    linear,\n    left top,\n    left bottom,\n    from(var(--agnosticui-btn-primary-raised-from, var(--agnosticui-primary-from))),\n    to(var(--agnosticui-btn-primary-raised-to, var(--agnosticui-primary-to)))\n  );\n  background: linear-gradient(\n    var(--agnosticui-btn-primary-raised-from, var(--agnosticui-primary-from)),\n    var(--agnosticui-btn-primary-raised-to, var(--agnosticui-primary-to))\n  );\n}\n\n.btn-raised.btn-primary:hover,\n.btn-raised.btn-primary:focus {\n  background: linear-gradient(\n    to bottom,\n    var(--agnosticui-btn-primary-raised-hover-from, var(--agnosticui-primary-hover)),\n    var(--agnosticui-btn-primary-raised-to, var(--agnosticui-primary-from))\n  );\n  background: -webkit-gradient(\n    linear,\n    left top,\n    left bottom,\n    from(var(--agnosticui-btn-primary-raised-hover-from, var(--agnosticui-primary-hover))),\n    to(var(--agnosticui-btn-primary-raised-to, var(--agnosticui-primary-from)))\n  );\n  background: linear-gradient(\n    var(--agnosticui-btn-primary-raised-hover-from, var(--agnosticui-primary-hover)),\n    var(--agnosticui-btn-primary-raised-to, var(--agnosticui-primary-from))\n  );\n}\n\n.btn-raised.btn-primary:active,\n.btn-raised.btn-primary.active {\n  opacity: 0.9;\n  box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.3);\n}\n\n/*\n* Raised Secondary Buttons\n*/\n.btn-raised.btn-secondary {\n  border-color: var(--agnosticui-btn-secondary-raised-to, var(--agnosticui-secondary-to));\n  background: -webkit-gradient(\n    linear,\n    left top,\n    left bottom,\n    from(var(--agnosticui-btn-secondary-raised-from, var(--agnosticui-secondary-from))),\n    to(var(--agnosticui-btn-secondary-raised-to, var(--agnosticui-secondary-to)))\n  );\n  background: linear-gradient(\n    var(--agnosticui-btn-secondary-raised-from, var(--agnosticui-secondary-from)),\n    var(--agnosticui-btn-secondary-raised-to, var(--agnosticui-secondary-to))\n  );\n}\n\n.btn-raised.btn-secondary:hover,\n.btn-raised.btn-secondary:focus {\n  background: linear-gradient(\n    to bottom,\n    var(--agnosticui-btn-secondary-raised-hover-from, var(--agnosticui-secondary-hover)),\n    var(--agnosticui-btn-secondary-raised-to, var(--agnosticui-secondary-to))\n  );\n  background: -webkit-gradient(\n    linear,\n    left top,\n    left bottom,\n    from(var(--agnosticui-btn-secondary-raised-hover-from, var(--agnosticui-secondary-hover))),\n    to(var(--agnosticui-btn-secondary-raised-to, var(--agnosticui-secondary-to)))\n  );\n  background: linear-gradient(\n    var(--agnosticui-btn-secondary-raised-hover-from, var(--agnosticui-secondary-hover)),\n    var(--agnosticui-btn-secondary-raised-to, var(--agnosticui-secondary-to))\n  );\n}\n\n.btn-raised.btn-secondary:active,\n.btn-raised.btn-secondary.active {\n  opacity: 0.9;\n  box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.3);\n}\n\n/**\n  * Border Buttons\n  */\n.btn-bordered {\n  border-width: 1px;\n  background: transparent;\n}\n\n/**\n  * Sizes\n  */\n.btn-large {\n  font-size: calc(var(--agnosticui-btn-font-size, 1rem) + 0.25rem);\n  height: 3rem;\n  line-height: 3rem;\n  padding: 0 3rem;\n}\n\n.btn-small {\n  font-size: calc(var(--agnosticui-btn-font-size, 1rem) - 0.25rem);\n  height: 2rem;\n  line-height: 2rem;\n  padding: 0 2rem;\n}\n\n/**\n  * Rounded\n  */\n.btn-rounded {\n  border-radius: var(--agnosticui-btn-radius, 0.25rem);\n}\n\n.btn-pill {\n  border-radius: 200px;\n}\n\n/*\n  * Size Adjustment for equal height & width buttons\n  *\n  * Remove padding\n  */\n.btn-circle {\n  border-radius: 100%;\n  width: 2.5rem;\n  height: 2.5rem;\n  padding: 0 !important;\n}\n\n.btn-circle-large {\n  font-size: calc(var(--agnosticui-btn-font-size, 1rem) + 0.25rem);\n  width: 3rem;\n  height: 3rem;\n}\n\n.btn-circle-small {\n  font-size: calc(var(--agnosticui-btn-font-size, 1rem) - 0.25rem);\n  width: 2rem;\n  height: 2rem;\n}\n\n/**\n * Button Block (stacked)\n */\n.btn-block {\n  width: 100%;\n}\n/* This is a utility class used if you literally want to stack block buttons one after another.\nApply this class to the nth-of-type(2) onwards to ensure the borders line up properly. */\n.btn-block-following {\n  margin-block-start: -1px;\n}\n\n/**\n * Invisible buttons. Generally used for a Cancel or icon button that behaves like a button,\n * semantically and for a11y, but, does so without all the typical \"button chrome\" behind it.\n */\n.btn-blank {\n  background-color: transparent;\n  border: 0;\n  border-radius: 0;\n  box-shadow: none;\n}\n.btn-blank:hover,\n.btn-blank:active,\n.btn-blank:focus {\n  background: none;\n  outline: 3px solid transparent;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "string",
                        "returnType": "string",
                        "line": 46
                    }
                },
                "getDisabled": {
                    "name": "getDisabled",
                    "getSignature": {
                        "name": "getDisabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 72
                    }
                },
                "getType": {
                    "name": "getType",
                    "getSignature": {
                        "name": "getType",
                        "type": "string",
                        "returnType": "string",
                        "line": 76
                    }
                }
            }
        },
        {
            "name": "ButtonGroupComponent",
            "id": "component-ButtonGroupComponent-4b51bb794de66fc06c358be281d7abb0",
            "file": "src/stories/ag/src/lib/buttongroup.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ag-button-group",
            "styleUrls": [
                "./button-group.css"
            ],
            "styles": [],
            "template": "<div [ngClass]=\"classes\">    <span class=\"screenreader-only\">{{ getAriaLabel }}</span>\n    <ng-content></ng-content>\n  </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string | undefined"
                },
                {
                    "name": "css",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ButtonComponent>",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "ButtonComponent"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  ChangeDetectionStrategy,\n  ContentChildren,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { ButtonComponent } from './button.component';\n\n// .screenreader-only is expected to be globally available via common.min.css\n@Component({\n  // eslint-disable-next-line @angular-eslint/component-selector\n  selector: 'ag-button-group',\n  template: `<div [ngClass]=\"classes\">\n    <span class=\"screenreader-only\">{{ getAriaLabel }}</span>\n    <ng-content></ng-content>\n  </div>`,\n  styleUrls: ['./button-group.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class ButtonGroupComponent {\n  @ContentChildren(ButtonComponent) buttons!: QueryList<ButtonComponent>;\n  @Input() css?: string;\n  @Input() ariaLabel: string | undefined;\n\n  public get getAriaLabel(): string {\n    const label = this.ariaLabel ? this.ariaLabel : 'button group element';\n    return label;\n  }\n\n  public get classes(): string {\n    const cssClass = this.css ? this.css : '';\n    return ['btn-group', cssClass].join(' ');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/**\n * Button Groups\n */\n.btn-group {\n  display: inline-flex;\n  flex-direction: row;\n}\n\n.btn-group .btn {\n  border-radius: 0;\n  margin-inline-start: -1px\n}\n\n.btn-first-wrap .btn {\n  margin-inline-start: 0;\n  border-top-left-radius: var(--agnosticui-btn-radius, var(--fluid-4));\n  border-bottom-left-radius: var(--agnosticui-btn-radius, var(--fluid-4));\n}\n\n.btn-last-wrap .btn {\n  border-top-right-radius: var(--agnosticui-btn-radius, var(--fluid-4));\n  border-bottom-right-radius: var(--agnosticui-btn-radius, var(--fluid-4));\n}\n",
                    "styleUrl": "./button-group.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "getAriaLabel": {
                    "name": "getAriaLabel",
                    "getSignature": {
                        "name": "getAriaLabel",
                        "type": "string",
                        "returnType": "string",
                        "line": 28
                    }
                },
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "string",
                        "returnType": "string",
                        "line": 33
                    }
                }
            }
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-ee0dfd0eb44ac4eccf847b6f96b0d40a",
            "file": "src/stories/ag/src/lib/card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ag-card",
            "styleUrls": [
                "./card.css"
            ],
            "styles": [],
            "template": "<div [ngClass]=\"classes\">    <ng-content></ng-content>\n  </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "css",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "isAnimated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean"
                },
                {
                    "name": "isSkinned",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean"
                },
                {
                    "name": "isStacked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'ag-card',\n  template: `<div [ngClass]=\"classes\">\n    <ng-content></ng-content>\n  </div>`,\n  styleUrls: ['./card.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class CardComponent {\n  @Input() css?: string;\n  @Input() isAnimated?: boolean;\n  @Input() isSkinned?: boolean = true;\n  @Input() isStacked?: boolean;\n  public get classes(): string {\n  // classes() {\n    const baseClass = this.isSkinned ? 'card' : 'card-base';\n    const isAnimatedClass = this.isAnimated ? 'card-animated' : '';\n    const isStackedClass = this.isStacked ? 'card-stacked' : '';\n    const overrides = this.css ? `${this.css}` : '';\n    return [\n      baseClass,\n      isAnimatedClass,\n      isStackedClass,\n      overrides,\n    ].join(' ');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/**\n * Cards\n *\n * I drew some inspiration from the article on media-query less cards:\n * https://css-tricks.com/how-to-make-a-media-query-less-card-component/\n */\n.card,\n.card-base {\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  position: relative;\n  box-sizing: border-box;\n  width: 100%;\n}\n\n.card,\n.card-skin {\n  box-shadow: var(--agnosticui-card-boxshadow1-offset-x, 2px)\n      var(--agnosticui-card-boxshadow1-offset-y, 6px) var(--agnosticui-card-boxshadow1-blur, 4px)\n      var(--agnosticui-card-boxshadow1-color, rgba(0, 0, 0, 0.25)),\n    var(--agnosticui-card-boxshadow2-offset-x, -2px)\n      var(--agnosticui-card-boxshadow2-offset-y, -1px) var(--agnosticui-card-boxshadow2-blur, 6px)\n      var(--agnosticui-card-boxshadow2-color, rgba(0, 0, 0, 0.15));\n  border-radius: var(--agnosticui-card-border-radius, 4px);\n  overflow: hidden;\n}\n\n.card:hover,\n.card-skin:hover {\n  box-shadow: var(--agnosticui-card-boxshadow1-offset-x, 2px)\n      var(--agnosticui-card-boxshadow1-offset-y, 6px) var(--agnosticui-card-boxshadow1-blur, 4px)\n      var(--agnosticui-card-boxshadow-hover-color-from, rgba(0, 0, 0, 0.35)),\n    var(--agnosticui-card-boxshadow2-offset-x, -2px)\n      var(--agnosticui-card-boxshadow2-offset-y, -1px) var(--agnosticui-card-boxshadow2-blur, 6px)\n      var(--agnosticui-card-boxshadow-hover-color-to, rgba(0, 0, 0, 0.25));\n}\n\n/**\n * Animates the y position and box shadow on hover\n */\n.card-animated {\n  transition: box-shadow ease-out 5s,\n    transform var(--agnosticui-timing-fast)\n      cubic-bezier(\n        var(--agnosticui-card-cubic-1, 0.39),\n        var(--agnosticui-card-cubic-2, 0.575),\n        var(--agnosticui-card-cubic-3, 0.565),\n        var(--agnosticui-card-cubic-4, 1)\n      );\n}\n.card-animated:hover {\n  transform: translateY(var(--agnosticui-card-translateY-hover, -3px));\n  transition: box-shadow ease-out var(--agnosticui-timing-fast),\n    transform var(--agnosticui-timing-slow)\n      cubic-bezier(\n        var(--agnosticui-card-cubic-1, 0.39),\n        var(--agnosticui-card-cubic-2, 0.575),\n        var(--agnosticui-card-cubic-3, 0.565),\n        var(--agnosticui-card-cubic-4, 1)\n      );\n}\n\n.card-stacked {\n  flex-direction: column;\n}\n",
                    "styleUrl": "./card.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "string",
                        "returnType": "string",
                        "line": 17
                    }
                }
            }
        },
        {
            "name": "ChoiceInputComponent",
            "id": "component-ChoiceInputComponent-ad86f72a727bf6829550b5846fc18e7d",
            "file": "src/stories/ag/src/lib/choice-input.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ag-choice-input",
            "styleUrls": [
                "./choice-input.css"
            ],
            "styles": [],
            "template": "<fieldset [ngClass]=\"fieldsetClass()\">    <legend [ngClass]=\"legendClasses()\">{{legendLabel}}</legend>\n      <ng-container *ngFor=\"let option of options\">\n        <label\n          [attr.disabled]=\"isDisabled || disabledOptions?.includes(option.value)\"\n          [ngClass]=\"labelClasses()\">\n            <input\n              [ngClass]=\"inputClasses()\"\n              [type]=\"type\"\n              [name]=\"option.name\"\n              [value]=\"option.value\"\n              [disabled]=\"isDisabled || disabledOptions?.includes(option.value)\"\n              [checked]=\"checkedOptions?.includes(option.value) || false\"\n              (change)=\"this.handleChange($event)\"\n              aria-hidden=\"true\"\n            />\n          <span [ngClass]=\"labelSpanClasses()\">{{option.label}}</span>\n        </label>\n      </ng-container>\n  </fieldset>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "checkedOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "[]"
                },
                {
                    "name": "disabledOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string[]"
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "boolean"
                },
                {
                    "name": "isFieldset",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean"
                },
                {
                    "name": "isInline",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean"
                },
                {
                    "name": "legendLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "string"
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "any[]"
                },
                {
                    "name": "size",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "\"small\" | \"large\" | string"
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "\"radio\" | \"checkbox\""
                }
            ],
            "outputsClass": [
                {
                    "name": "selected",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_checkedOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "fieldsetClass",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleChange",
                    "args": [
                        {
                            "name": "ev",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "inputClasses",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "labelClasses",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "labelSpanClasses",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "legendClasses",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ChangeDetectionStrategy, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'ag-choice-input',\n  template: `<fieldset [ngClass]=\"fieldsetClass()\">\n    <legend [ngClass]=\"legendClasses()\">{{legendLabel}}</legend>\n      <ng-container *ngFor=\"let option of options\">\n        <label\n          [attr.disabled]=\"isDisabled || disabledOptions?.includes(option.value)\"\n          [ngClass]=\"labelClasses()\">\n            <input\n              [ngClass]=\"inputClasses()\"\n              [type]=\"type\"\n              [name]=\"option.name\"\n              [value]=\"option.value\"\n              [disabled]=\"isDisabled || disabledOptions?.includes(option.value)\"\n              [checked]=\"checkedOptions?.includes(option.value) || false\"\n              (change)=\"this.handleChange($event)\"\n              aria-hidden=\"true\"\n            />\n          <span [ngClass]=\"labelSpanClasses()\">{{option.label}}</span>\n        </label>\n      </ng-container>\n  </fieldset>`,\n  styleUrls: ['./choice-input.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class ChoiceInputComponent {\n  @Input() isInline?: boolean = false;\n  @Input() isFieldset?: boolean = true;\n  @Input() isDisabled?: boolean = false;\n  @Input() options?: any[] = [];\n  @Input() disabledOptions?: string[];\n\n  private _checkedOptions: any[] = [];\n  get checkedOptions(): any[] {\n    return this._checkedOptions;\n  }\n  @Input()\n  set checkedOptions(val: any[]) {\n    this._checkedOptions = val;\n  }\n\n  @Input() legendLabel: string = '';\n  @Input() type!: 'radio' | 'checkbox';\n  // Medium is default so we just use empty string\n  @Input() size: 'small' | 'large' | '' = '';\n  // TODO type this\n  @Output() selected = new EventEmitter<any>();\n\n  labelSpanClasses() {\n    let klasses = [\n      this.type ? `${this.type}-label` : '',\n      this.size ? `${this.type}-label-${this.size}` : '',\n    ];\n    klasses = klasses.filter((klass) => klass.length);\n    return klasses.join(' ');   \n  }\n  handleChange(ev: Event) {\n    const el = ev.target as HTMLInputElement;\n    const value = el.value;\n    if (this.type === 'checkbox') {\n      let checkedItemsUpdated;\n      if (this.checkedOptions?.includes(value)) {\n        checkedItemsUpdated = this.checkedOptions?.filter((item) => item !== value);\n        this.checkedOptions = checkedItemsUpdated;\n      } else {\n        checkedItemsUpdated = [...this.checkedOptions, value];\n        this.checkedOptions = checkedItemsUpdated;\n      }\n      this.selected.emit(checkedItemsUpdated)\n    } else {\n      // Type is radio. We ignore if they're trying to check the currently checked\n      if (this.checkedOptions?.includes(value)) {\n        // Since you can only have one checked radio at a time, we simply\n        // set to the new radio to be checked\n        this.checkedOptions = [value];\n        this.selected.emit(this.checkedOptions)\n      }\n    }\n  }\n  inputClasses() {\n    let inputKlasses = [\n      `${this.type}`,\n      this.size ? `${this.size}` : '',\n      this.isDisabled ? 'disabled' : '',\n    ]\n    inputKlasses = inputKlasses.filter((klass) => klass.length);\n    return inputKlasses.join(' ');\n  }\n  fieldsetClass() {\n    let klasses = [\n      `${this.type}-group`,\n      this.size === 'large' ? `${this.type}-group-${this.size}` : '',\n      this.isFieldset === false ? `${this.type}-group-hidden` : '',\n    ];\n    return klasses.filter((klass) => klass.length)\n  }\n  legendClasses() {\n    let klasses = [\n      `${this.type}-legend`,\n      // .screenreader-only is expected to be globally available via common.min.css\n      this.isFieldset === false ? 'screenreader-only' : null,\n    ];\n    return klasses.join(' '); \n  }\n  labelClasses() {\n    let klasses = [\n      this.type ? `${this.type}-label-wrap` : '',\n      this.isInline ? `${this.type}-label-wrap-inline` : '',\n    ];\n    klasses = klasses.filter((klass) => klass.length);\n    return klasses.join(' ');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/**\n * These radio and checkbox customizations are an amalgamation of various resources I've found on the internets; from Heydon\n * Pickering's radio article (and his Inclusive Components book), to Sara Soueidan, Scott O'Hara, MDO, and Adrian Roselli's\n * research on the matter of inclusive hiding and custom radio/checkbox inputs.\n */\n\n.checkbox-group,\n.radio-group {\n  --width-28: calc(7 * var(--fluid-4)); /* 1.75rem/28px */\n  border: 1px solid var(--agnosticui-checkbox-border-color, var(--agnosticui-gray-light));\n  padding: var(--fluid-24);\n  padding-top: var(--fluid-14);\n  border-radius: 0.5rem;\n}\n\n.checkbox-group-large,\n.radio-group-large {\n  padding: var(--width-28);\n  padding-top: var(--fluid-16);\n}\n\n.checkbox-legend,\n.radio-legend {\n  padding: var(--fluid-2) var(--fluid-14);\n  border-radius: var(--fluid-2);\n}\n\n/* Hiding technique from https://www.sarasoueidan.com/blog/inclusively-hiding-and-styling-checkboxes-and-radio-buttons/\n*/\n.checkbox,\n.radio {\n  position: absolute;\n  width: var(--fluid-14);\n  height: var(--fluid-14);\n  opacity: 0;\n}\n\n.checkbox-small,\n.radio-small {\n  width: var(--fluid-12);\n  height: var(--fluid-12);\n}\n\n.checkbox-large,\n.radio-large {\n  width: var(--fluid-16);\n  height: var(--fluid-16);\n}\n\n.checkbox-label-wrap,\n.radio-label-wrap {\n  display: block;\n  cursor: pointer;\n  user-select: none;\n  position: relative;\n  line-height: var(--fluid-36);\n}\n\n.checkbox-label-wrap-inline,\n.radio-label-wrap-inline {\n  display: inline-flex;\n}\n\n.checkbox-label-wrap-inline:not(:last-child),\n.radio-label-wrap-inline:not(:last-child) {\n  margin-inline-end: var(--fluid-8);\n}\n\n/* These are not actual <label> elements but the <span> label copy elements */\n.checkbox-label,\n.radio-label {\n  display: flex;\n  align-items: center;\n  flex-wrap: wrap;\n}\n\n/* The checkmark itself */\n.checkbox-label:after {\n  content: '';\n  position: absolute;\n  left: var(--fluid-6);\n  top: var(--fluid-10);\n  width: var(--fluid-6);\n  height: var(--fluid-12);\n  border: solid white;\n  border-width: 0 var(--fluid-2) var(--fluid-2) 0;\n  transform-origin: center center;\n  transform: rotate(40deg) scale(0);\n  transition-property: border, background-color, transform;\n  transition-duration: var(--agnosticui-timing-fast);\n  transition-timing-function: ease-in-out;\n}\n.checkbox-label:before,\n.radio-label:before {\n  content: '';\n  display: inline-block;\n  margin-inline-end: var(--agnosticui-checkbox-spacing-end, 0.75rem);\n  transition: var(--agnosticui-timing-fast) ease-out all;\n}\n\n/* Since we build up the radio size outwardly, it's naturally larger then the checkboxes\nso we add a multiplyer to even those out initially */\n.checkbox-label:before {\n  border: 2px solid var(--agnosticui-checkbox-border-color, var(--agnosticui-gray-light));\n  width: var(--fluid-16);\n  height: var(--fluid-16);\n  transition: box-shadow var(--agnosticui-timing-fast) ease-out;\n}\n\n.radio-label:before {\n  width: var(--fluid-14);\n  height: var(--fluid-14);\n  vertical-align: calc(-1 * var(--fluid-2));\n  border-radius: 50%;\n  border: var(--fluid-2) solid var(--agnosticui-checkbox-light, var(--agnosticui-light));\n  box-shadow: 0 0 0 var(--fluid-2)\n    var(--agnosticui-checkbox-border-color, var(--agnosticui-gray-light));\n  transition: box-shadow var(--agnosticui-timing-fast) ease-out;\n}\n\n.checkbox-label-small:after {\n  left: calc(1.25 * var(--fluid-4));\n}\n.checkbox-label-small:before {\n  width: var(--fluid-14);\n  height: var(--fluid-14);\n}\n\n.radio-label-small:before {\n  width: var(--fluid-12);\n  height: var(--fluid-12);\n}\n\n.checkbox-label-large:after {\n  left: calc(1.75 * var(--fluid-4));\n}\n\n.checkbox-label-large:before {\n  width: var(--fluid-18);\n  height: var(--fluid-18);\n}\n\n.radio-label-large:before {\n  width: var(--fluid-16);\n  height: var(--fluid-16);\n}\n\n/* the checked style using the :checked pseudo class */\n.radio:checked + .radio-label:before {\n  background: var(--agnosticui-checkbox-fill-color, #08a880);\n  box-shadow: 0 0 0 var(--fluid-2)\n    var(--agnosticui-checkbox-border-color, var(--agnosticui-gray-light));\n}\n\n.radio:focus + .radio-label:before {\n  box-shadow: 0 0 0 var(--fluid-2)\n      var(--agnosticui-checkbox-border-color, var(--agnosticui-gray-light)),\n    0 0 0 calc(1.5 * var(--fluid-2)) white,\n    0 0 0 calc(2.25 * var(--fluid-2)) var(--agnosticui-focus-ring-color);\n}\n\n.checkbox:focus + .checkbox-label:before {\n  box-shadow: 0 0 0 3px var(--agnosticui-focus-ring-color);\n  outline: 3px solid transparent;\n}\n\n.checkbox:checked + .checkbox-label:after {\n  transform: rotate(40deg) scale(1);\n}\n.checkbox:checked + .checkbox-label:before {\n  background: var(--agnosticui-checkbox-fill-color, #08a880);\n  border: 2px solid var(--agnosticui-checkbox-fill-color, #08a880);\n}\n\n/**\n * Consumer styles <legend> themselves, and can opt to use the .screenreader-only from\n * utilities.css if they're design requires it.\n */\n.checkbox-group-hidden,\n.radio-group-hidden {\n  border: 0;\n  margin-block-start: 0;\n  margin-inline-start: 0;\n  margin-inline-end: 0;\n  margin-block-end: 0;\n  padding-block-start: 0;\n  padding-inline-start: 0;\n  padding-inline-end: 0;\n  padding-block-end: 0;\n}\n\n/* Targets both the label container and the span label that is used\nto style the custom radio / checkbox. Note it does NOT target the input\nitself. */\n.checkbox[disabled] + .checkbox-label,\n.radio[disabled] + .radio-label,\n.checkbox-label-wrap.disabled,\n.radio-label-wrap.disabled,\n.checkbox-label-wrap-inline.disabled,\n.radio-label-wrap-inline.disabled {\n  color: var(--agnosticui-input-disabled-color, var(--agnosticui-disabled-color)) !important;\n  appearance: none !important;\n  box-shadow: none !important;\n  cursor: not-allowed !important;\n  opacity: 0.8 !important;\n}\n\n@media screen and (-ms-high-contrast: active) {\n  /* High contrast mode outline hacks */\n  .checkbox-label-wrap.disabled,\n  .radio-label-wrap.disabled,\n  .checkbox-label-wrap-inline.disabled,\n  .radio-label-wrap-inline.disabled {\n    outline: 2px solid transparent;\n    outline-offset: -2px;\n  }\n}\n",
                    "styleUrl": "./choice-input.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "checkedOptions": {
                    "name": "checkedOptions",
                    "setSignature": {
                        "name": "checkedOptions",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "any[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 41,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "any[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "checkedOptions",
                        "type": "[]",
                        "returnType": "any[]",
                        "line": 37
                    }
                }
            }
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-07dac726282c72d3098af1d0b4abac09",
            "file": "src/stories/ag/src/lib/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ag-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header [ngClass]=\"classes\">    <div class=\"header-content\"><ng-content></ng-content></div>\n  </header>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "css",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "string"
                },
                {
                    "name": "isSkinned",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "boolean"
                },
                {
                    "name": "isSticky",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'ag-header-nav',\n  template: `<nav>\n    <div [ngClass]=\"classes\">\n      <ng-content></ng-content>\n    </div>\n  </nav>`,\n  styleUrls: ['./headernav.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class HeaderNavComponent {\n  @Input() css?: string;\n  public get classes(): string {\n    let klasses = ['header-nav', this.css ? `${this.css}` : ''];\n    klasses = klasses.filter((klass) => klass.length);\n    return klasses.join(' ')\n  }\n}\n\n@Component({\n  selector: 'ag-header-nav-item',\n  template: `<div [ngClass]=\"classes\"><ng-content></ng-content></div>`,\n  styleUrls: ['./headernavitem.css'],\n})\n\nexport class HeaderNavItemComponent {\n  @Input() css?: string;\n  public get classes(): string {\n    let klasses = ['header-nav-item', this.css ? `${this.css}` : ''];\n    klasses = klasses.filter((klass) => klass.length);\n    return klasses.join(' ');\n  }\n}\n\n@Component({\n  selector: 'ag-header',\n  template: `<header [ngClass]=\"classes\">\n    <div class=\"header-content\"><ng-content></ng-content></div>\n  </header>\n  `,\n  styleUrls: ['./header.css'],\n})\n\nexport class HeaderComponent {\n  @Input() css?: string;\n  @Input() isSkinned?: boolean = true;\n  @Input() isSticky?: boolean;\n  \n  public get classes(): string {\n    const baseClass = this.isSkinned ? 'header' : 'header-base';\n    const isStickyClass = this.isSticky ? 'header-sticky' : '';\n    const overrides = this.css ? `${this.css}` : '';\n    let klasses = [\n      baseClass,\n      isStickyClass,\n      overrides,\n    ];\n    klasses = klasses.filter((klass) => klass.length);\n    return klasses.join(' ');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".header,\n.header-base {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n}\n\n.header-base img,\n.header img {\n  max-width: 100%;\n  height: auto;\n}\n\n.header,\n.header-skin {\n  background-color: var(--agnosticui-header-background-color, var(--agnosticui-light));\n  box-shadow: var(--agnosticui-header-box-shadow-hor, 0)\n    var(--agnosticui-header-box-shadow-ver, 1px) var(--agnosticui-header-box-shadow-blur, 5px)\n    var(--agnosticui-header-box-shadow-spread, 2px)\n    var(--agnosticui-header-box-shadow-color, rgba(0, 0, 0, 0.1));\n  height: var(--agnosticui-header-mobile-height, 128px);\n  font-family: var(--agnosticui-header-font-family, var(--agnosticui-font-family));\n  border-bottom: 1px solid var(--agnosticui-header-border-color, var(--agnosticui-gray-light));\n}\n\n.header-content {\n  width: var(--agnosticui-header-content-width, 960px);\n  max-width: 100%;\n  margin: 0 auto;\n}\n\n.header .header-content {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: center;\n  flex-wrap: wrap;\n}\n\n/**\n * If you make your header sticky, you should likely consider that jump links\n * e.g. <h1 id=\"Jump-Here\">... will tuck underneath the header! Here's a recommendation\n * for how to circumnavigate this issue via scroll-margin-top:\n  h1[id],\n  h2[id],\n  h3[id],\n  h4[id],\n  h5[id],\n  h6[id] {\n    scroll-margin-top: 80px;\n  }\n * In this case I have a 64px tall header so I've added 16px for clearance -- you'll need\n * to curate your own use case, but scroll-margin-top is super useful for this use case.\n */\n\n.header-sticky {\n  position: relative;\n  top: 0;\n  z-index: 10;\n}\n\n@media (min-width: 960px) {\n  .header-sticky {\n    position: sticky;\n  }\n\n  .header .header-content {\n    flex-direction: row;\n    justify-content: space-between;\n  }\n  .header {\n    height: var(--agnosticui-header-height, var(--fluid-64));\n  }\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "string",
                        "returnType": "string",
                        "line": 52
                    }
                }
            }
        },
        {
            "name": "HeaderNavComponent",
            "id": "component-HeaderNavComponent-07dac726282c72d3098af1d0b4abac09",
            "file": "src/stories/ag/src/lib/header.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ag-header-nav",
            "styleUrls": [
                "./headernav.css"
            ],
            "styles": [],
            "template": "<nav>    <div [ngClass]=\"classes\">\n      <ng-content></ng-content>\n    </div>\n  </nav>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "css",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'ag-header-nav',\n  template: `<nav>\n    <div [ngClass]=\"classes\">\n      <ng-content></ng-content>\n    </div>\n  </nav>`,\n  styleUrls: ['./headernav.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class HeaderNavComponent {\n  @Input() css?: string;\n  public get classes(): string {\n    let klasses = ['header-nav', this.css ? `${this.css}` : ''];\n    klasses = klasses.filter((klass) => klass.length);\n    return klasses.join(' ')\n  }\n}\n\n@Component({\n  selector: 'ag-header-nav-item',\n  template: `<div [ngClass]=\"classes\"><ng-content></ng-content></div>`,\n  styleUrls: ['./headernavitem.css'],\n})\n\nexport class HeaderNavItemComponent {\n  @Input() css?: string;\n  public get classes(): string {\n    let klasses = ['header-nav-item', this.css ? `${this.css}` : ''];\n    klasses = klasses.filter((klass) => klass.length);\n    return klasses.join(' ');\n  }\n}\n\n@Component({\n  selector: 'ag-header',\n  template: `<header [ngClass]=\"classes\">\n    <div class=\"header-content\"><ng-content></ng-content></div>\n  </header>\n  `,\n  styleUrls: ['./header.css'],\n})\n\nexport class HeaderComponent {\n  @Input() css?: string;\n  @Input() isSkinned?: boolean = true;\n  @Input() isSticky?: boolean;\n  \n  public get classes(): string {\n    const baseClass = this.isSkinned ? 'header' : 'header-base';\n    const isStickyClass = this.isSticky ? 'header-sticky' : '';\n    const overrides = this.css ? `${this.css}` : '';\n    let klasses = [\n      baseClass,\n      isStickyClass,\n      overrides,\n    ];\n    klasses = klasses.filter((klass) => klass.length);\n    return klasses.join(' ');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* Goes on the <ul> */\n.header-nav {\n  margin: 0;\n  padding: 0;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n@media (min-width: 960px) {\n  .header-nav {\n    flex-direction: row;\n  }\n}\n",
                    "styleUrl": "./headernav.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "string",
                        "returnType": "string",
                        "line": 16
                    }
                }
            }
        },
        {
            "name": "HeaderNavItemComponent",
            "id": "component-HeaderNavItemComponent-07dac726282c72d3098af1d0b4abac09",
            "file": "src/stories/ag/src/lib/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ag-header-nav-item",
            "styleUrls": [
                "./headernavitem.css"
            ],
            "styles": [],
            "template": "<div [ngClass]=\"classes\"><ng-content></ng-content></div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "css",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'ag-header-nav',\n  template: `<nav>\n    <div [ngClass]=\"classes\">\n      <ng-content></ng-content>\n    </div>\n  </nav>`,\n  styleUrls: ['./headernav.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class HeaderNavComponent {\n  @Input() css?: string;\n  public get classes(): string {\n    let klasses = ['header-nav', this.css ? `${this.css}` : ''];\n    klasses = klasses.filter((klass) => klass.length);\n    return klasses.join(' ')\n  }\n}\n\n@Component({\n  selector: 'ag-header-nav-item',\n  template: `<div [ngClass]=\"classes\"><ng-content></ng-content></div>`,\n  styleUrls: ['./headernavitem.css'],\n})\n\nexport class HeaderNavItemComponent {\n  @Input() css?: string;\n  public get classes(): string {\n    let klasses = ['header-nav-item', this.css ? `${this.css}` : ''];\n    klasses = klasses.filter((klass) => klass.length);\n    return klasses.join(' ');\n  }\n}\n\n@Component({\n  selector: 'ag-header',\n  template: `<header [ngClass]=\"classes\">\n    <div class=\"header-content\"><ng-content></ng-content></div>\n  </header>\n  `,\n  styleUrls: ['./header.css'],\n})\n\nexport class HeaderComponent {\n  @Input() css?: string;\n  @Input() isSkinned?: boolean = true;\n  @Input() isSticky?: boolean;\n  \n  public get classes(): string {\n    const baseClass = this.isSkinned ? 'header' : 'header-base';\n    const isStickyClass = this.isSticky ? 'header-sticky' : '';\n    const overrides = this.css ? `${this.css}` : '';\n    let klasses = [\n      baseClass,\n      isStickyClass,\n      overrides,\n    ];\n    klasses = klasses.filter((klass) => klass.length);\n    return klasses.join(' ');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".header-nav-item {\n  display: inline-block;\n}\n.header-nav-item:not(:last-child) {\n  margin-inline-end: initial;\n  margin-block-end: var(--fluid-8);\n}\n\n.header-nav-item a {\n  color: var(--agnosticui-header-color, var(--agnosticui-font-color));\n  text-decoration: none;\n}\n\n@media (min-width: 960px) {\n  .header-nav-item:not(:last-child) {\n    margin-inline-end: var(--agnosticui-header-nav-spacing, var(--fluid-32));\n    margin-block-end: initial;\n  }\n}\n",
                    "styleUrl": "./headernavitem.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "string",
                        "returnType": "string",
                        "line": 31
                    }
                }
            }
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-849fdc4ecdbbb16d690cde8322ad39b4",
            "file": "src/stories/ag/src/lib/input.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ag-input",
            "styleUrls": [
                "./input.css",
                "./inputaddon-hack.css"
            ],
            "styles": [],
            "template": "<div className=\"width-full\">    <label [class]=\"labelClasses()\" [for]=\"uniqueId\">\n      {{label}}\n    </label>\n    <ng-container *ngIf=\"type === 'textarea'; else noTextarea\">\n      <textarea *ngIf=\"type === 'textarea'\"\n        [id]=\"uniqueId\"\n        [name]=\"uniqueId\"\n        [value]=\"defaultValue || ''\"\n        [disabled]=\"isDisabled\"\n        [class]=\"inputClasses()\"\n        [placeholder]=\"placeholder ? placeholder : ''\"\n        [attr.rows]=\"rows\"\n        [attr.cols]=\"cols\"\n        (change)=\"handleChange\"\n        (focus)=\"handleFocus\"\n        (blur)=\"handleBlur\"\n      ></textarea>\n    </ng-container>\n    <ng-template #noTextarea>\n      <div class=\"input-addon-container\" *ngIf=\"hasLeftAddon || hasRightAddon else inputOnly\">\n        <ng-content select=\"[addOnLeft]\"></ng-content>\n        <input\n          [id]=\"uniqueId\"\n          [name]=\"uniqueId\"\n          [value]=\"defaultValue || ''\"\n          [type]=\"type\"\n          [disabled]=\"isDisabled\"\n          [class]=\"inputClasses()\"\n          [placeholder]=\"placeholder ? placeholder : ''\"\n          (change)=\"handleChange\"\n          (focus)=\"handleFocus\"\n          (blur)=\"handleBlur\"\n        />\n        <ng-content select=\"[addOnRight]\"></ng-content>\n      </div>\n      <ng-template #inputOnly>\n        <input\n          [id]=\"uniqueId\"\n          [name]=\"uniqueId\"\n          [value]=\"defaultValue || ''\"\n          [type]=\"type\"\n          [disabled]=\"isDisabled\"\n          [class]=\"inputClasses()\"\n          [placeholder]=\"placeholder ? placeholder : ''\"\n          (change)=\"handleChange\"\n          (focus)=\"handleFocus\"\n          (blur)=\"handleBlur\"\n        />\n      </ng-template>\n    </ng-template>\n    <span *ngIf=\"isInvalid; else helpHint\" [class]=\"invalidClasses()\" role=\"status\" aria-live=\"polite\">\n      {{ invalidText }}\n    </span>\n    <ng-template #helpHint>\n      <span [class]=\"helpClasses()\" role=\"status\" aria-live=\"polite\">\n      {{ helpText }}\n      </span>\n    </ng-template>\n  </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "cols",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 93,
                    "type": "number"
                },
                {
                    "name": "defaultValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 86,
                    "type": "string"
                },
                {
                    "name": "hasLeftAddon",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "boolean"
                },
                {
                    "name": "hasRightAddon",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "boolean"
                },
                {
                    "name": "helpText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "string"
                },
                {
                    "name": "inputCss",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 84,
                    "type": "string"
                },
                {
                    "name": "invalidText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "string"
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "boolean"
                },
                {
                    "name": "isInline",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "boolean"
                },
                {
                    "name": "isInvalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "boolean"
                },
                {
                    "name": "isRounded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "boolean"
                },
                {
                    "name": "isSkinned",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "boolean"
                },
                {
                    "name": "isUnderlined",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "boolean"
                },
                {
                    "name": "isUnderlinedWithBackground",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "boolean"
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82,
                    "type": "string"
                },
                {
                    "name": "labelCss",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83,
                    "type": "string"
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 85,
                    "type": "string"
                },
                {
                    "name": "rows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 92,
                    "type": "number"
                },
                {
                    "name": "size",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 87,
                    "type": "\"small\" | \"large\" | string"
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 88,
                    "type": "\"text\" | \"password\" | \"email\" | \"number\" | \"url\" | \"tel\" | \"search\" | \"textarea\""
                },
                {
                    "name": "uniqueId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handleBlur",
                    "args": [
                        {
                            "name": "ev",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleChange",
                    "args": [
                        {
                            "name": "ev",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleFocus",
                    "args": [
                        {
                            "name": "ev",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "helpClasses",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "inputClasses",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "invalidClasses",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "labelClasses",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'ag-input',\n  template: `<div className=\"width-full\">\n    <label [class]=\"labelClasses()\" [for]=\"uniqueId\">\n      {{label}}\n    </label>\n    <ng-container *ngIf=\"type === 'textarea'; else noTextarea\">\n      <textarea *ngIf=\"type === 'textarea'\"\n        [id]=\"uniqueId\"\n        [name]=\"uniqueId\"\n        [value]=\"defaultValue || ''\"\n        [disabled]=\"isDisabled\"\n        [class]=\"inputClasses()\"\n        [placeholder]=\"placeholder ? placeholder : ''\"\n        [attr.rows]=\"rows\"\n        [attr.cols]=\"cols\"\n        (change)=\"handleChange\"\n        (focus)=\"handleFocus\"\n        (blur)=\"handleBlur\"\n      ></textarea>\n    </ng-container>\n    <ng-template #noTextarea>\n      <div class=\"input-addon-container\" *ngIf=\"hasLeftAddon || hasRightAddon else inputOnly\">\n        <ng-content select=\"[addOnLeft]\"></ng-content>\n        <input\n          [id]=\"uniqueId\"\n          [name]=\"uniqueId\"\n          [value]=\"defaultValue || ''\"\n          [type]=\"type\"\n          [disabled]=\"isDisabled\"\n          [class]=\"inputClasses()\"\n          [placeholder]=\"placeholder ? placeholder : ''\"\n          (change)=\"handleChange\"\n          (focus)=\"handleFocus\"\n          (blur)=\"handleBlur\"\n        />\n        <ng-content select=\"[addOnRight]\"></ng-content>\n      </div>\n      <ng-template #inputOnly>\n        <input\n          [id]=\"uniqueId\"\n          [name]=\"uniqueId\"\n          [value]=\"defaultValue || ''\"\n          [type]=\"type\"\n          [disabled]=\"isDisabled\"\n          [class]=\"inputClasses()\"\n          [placeholder]=\"placeholder ? placeholder : ''\"\n          (change)=\"handleChange\"\n          (focus)=\"handleFocus\"\n          (blur)=\"handleBlur\"\n        />\n      </ng-template>\n    </ng-template>\n    <span *ngIf=\"isInvalid; else helpHint\" [class]=\"invalidClasses()\" role=\"status\" aria-live=\"polite\">\n      {{ invalidText }}\n    </span>\n    <ng-template #helpHint>\n      <span [class]=\"helpClasses()\" role=\"status\" aria-live=\"polite\">\n      {{ helpText }}\n      </span>\n    </ng-template>\n  </div>`,\n  styleUrls: ['./input.css', './inputaddon-hack.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class InputComponent {\n  @Input() helpText?: string = '';\n  @Input() invalidText?: string = '';\n  @Input() isInvalid?: boolean = false;\n  @Input() isSkinned?: boolean = true;\n  @Input() isRounded?: boolean = false;\n  @Input() isUnderlined?: boolean = false;\n  @Input() isInline?: boolean = false;\n  @Input() isDisabled?: boolean = false;\n  @Input() hasLeftAddon?: boolean = false;\n  @Input() hasRightAddon?: boolean = false;\n  @Input() isUnderlinedWithBackground?: boolean = false;\n  @Input() uniqueId!: string;\n  @Input() label!: string;\n  @Input() labelCss?: string;\n  @Input() inputCss?: string;\n  @Input() placeholder?: string;\n  @Input() defaultValue?: string;\n  @Input() size?: 'small' | 'large' | '' = '';\n  @Input() type!: 'text' | 'password' | 'email' | 'number' | 'url' | 'tel' | 'search' | 'textarea';\n  // It appears we can't have arbitrary props in Angular and they all have to be defined\n  // as an @Input. React has ...rest, Vue has v-bind=\"$attrs\", Svelte has  {...$$restProps} ¯\\_(ツ)_/¯\n  // https://github.com/angular/angular/issues/14545\n  @Input() rows?: number;\n  @Input() cols?: number;\n\n  helpClasses() {\n    let klasses = [\n      !this.size ? 'field-help' : '',\n      this.size ? `field-help-${this.size}` : '',\n    ]\n    return klasses\n      .filter((klass) => klass.length)\n      .join(' ');\n  }\n  invalidClasses() {\n    let klasses = [\n      !this.size ? 'field-error' : '',\n      this.size ? `field-error-${this.size}` : '',\n    ]\n    return klasses\n      .filter((klass) => klass.length)\n      .join(' ');\n  }\n  labelClasses() {\n    let labelKlasses = [\n      'label',\n      this.isInvalid ? 'label-error' : '',\n      this.isInline ? 'label-inline' : '',\n      this.size ? `label-${this.size}`: '',\n      this.labelCss ? this.labelCss : ''\n    ];\n    return labelKlasses\n      .filter((klass) => klass.length)\n      .join(' ');\n  }\n  inputClasses() {\n    let klasses = [\n      this.isSkinned ? 'input' : 'input-base',\n      this.isRounded ? 'input-rounded' : '',\n      this.isUnderlined ? 'input-underlined' : '',\n      this.isDisabled ? 'disabled' : '',\n      this.isInline ? 'input-inline' : '',\n      this.hasLeftAddon ? 'input-has-left-addon': '',\n      this.hasRightAddon ? 'input-has-right-addon' : '',\n      this.isInvalid ? 'input-error' : '',\n      this.isUnderlinedWithBackground ? 'input-underlined-bg' : '',\n      this.inputCss ? `${this.inputCss}` : '',\n      this.size ? `input-${this.size}` : '',\n    ];\n    klasses = klasses.filter((klass) => klass.length);\n    return klasses.join(' ');\n  }\n  handleChange(ev: Event) {\n    console.log('handleChange not yet implemented...');\n  }\n  handleFocus(ev: Event) {\n    console.log('handleFocus not yet implemented...');\n  }\n  handleBlur(ev: Event) {\n    console.log('handleBlur not yet implemented...');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".input-base,\n.input {\n  /* Note this cannot be user-select: none else mobile safari won't accept input:\n  https://stackoverflow.com/questions/49889003/cannot-write-into-input-field-on-safari/49901069\n   */\n  user-select: initial;\n  appearance: none;\n  box-sizing: border-box;\n  /* Use the same color for the cursor */\n  caret-color: currentColor;\n}\n\n.label,\n.label-base {\n  padding: 0;\n  border: 0;\n  box-sizing: border-box;\n  font-family: inherit;\n}\n\n/* Electing to scope these as opposed to doing :root level definitions */\n.field-help,\n.field-help-large,\n.field-help-small,\n.field-error,\n.field-error-large,\n.field-error-small,\n.label-skin,\n.label,\n.input-addon-container,\n.input-small,\n.input-large,\n.input-skin,\n.input-underlined,\n.input-underlined-bg,\n.input {\n  color: var(--agnosticui-font-color, var(--agnosticui-dark));\n  font-family: var(\n    --agnosticui-font-family,\n    -apple-system,\n    BlinkMacSystemFont,\n    'Segoe UI',\n    'Open Sans',\n    'Ubuntu',\n    'Fira Sans',\n    Helvetica,\n    'Droid Sans',\n    'Helvetica Neue',\n    sans-serif,\n    'Apple Color Emoji',\n    'Segoe UI Emoji',\n    'Segoe UI Symbol'\n  );\n  font-weight: var(--agnosticui-font-weight, 300);\n  font-size: var(--agnosticui-font-size, 1rem);\n  line-height: var(--agnosticui-line-height, 1.25rem);\n  width: 100%;\n  max-width: 100%;\n}\n\n.input-skin,\n.input {\n  /* seems like a reasonable default as chrome picks `outset` which results in a weird 3d effect */\n  border-style: solid;\n  /* this can be overriden, but it might mess with the balance of the button heights across variants */\n  border-width: var(--agnosticui-input-border-size, 1px);\n  border-color: var(--agnosticui-input-border-color, var(--agnosticui-gray-light));\n  /* these can be overriden, but it might mess with the balance of the inputheights across variants */\n  padding-block-start: var(--agnosticui-input-vertical-pad, 0.5rem);\n  padding-block-end: var(--agnosticui-input-vertical-pad, 0.5rem);\n  padding-inline-start: var(--agnosticui-input-side-padding, 0.75rem);\n  padding-inline-end: var(--agnosticui-input-side-padding, 0.75rem);\n\n  /* Note we only want to set properties that we actually want\n  to transition in. For example, if we transition \"all\", the\n  inputs will \"grow in\" on page load—not a happy effect :) */\n  transition-property: box-shadow;\n  transition-duration: var(--agnosticui-input-timing, var(--agnosticui-timing-medium));\n}\n\n.label {\n  display: inline-block;\n  /* Provided --agnosticui-input-vertical-pad isn't overriden we'll get 20px\n  label w/a 6px margin then a 38px input = 64 which is on the 8pt grid */\n  margin-block-start: 0;\n  margin-inline-start: 0;\n  margin-inline-end: 0;\n  margin-block-end: var(--agnosticui-input-label-pad, 0.375rem);\n  vertical-align: initial;\n}\n\n/* Reset labels and field errors to be 2px less then input font size */\n.field-help,\n.field-error,\n.label,\n.label-skin {\n  font-size: calc(var(--agnosticui-font-size, 1rem) - 2px);\n}\n\n.label-inline,\n.input-inline {\n  width: auto;\n}\n\n/* When inlined, the margin-block-end will throw the label off-center with adjacent input */\n.label-inline {\n  margin-block-start: 0;\n  margin-block-end: 0;\n  margin-inline-start: 0;\n  margin-inline-end: var(--agnosticui-input-side-padding, 0.75rem);\n}\n\n/**\n* Placeholder\n*/\n.input::-webkit-input-placeholder {\n  color: currentColor;\n  opacity: 0.5;\n  transition: opacity var(--agnosticui-timing-fast) ease-out;\n}\n\n.input::-moz-placeholder {\n  color: currentColor;\n  opacity: 0.5;\n  transition: opacity var(--agnosticui-timing-fast) ease-out;\n}\n\n.input::-ms-placeholder {\n  color: currentColor;\n  opacity: 0.5;\n  transition: opacity var(--agnosticui-timing-fast) ease-out;\n}\n\n.input:-ms-placeholder {\n  color: currentColor;\n  opacity: 0.5;\n  transition: opacity var(--agnosticui-timing-fast) ease-out;\n}\n\n/**\n* Underlined inputs\n*/\n.input-underlined {\n  border-top: 0;\n  border-left: 0;\n  border-right: 0;\n  border-color: var(--agnosticui-input-underlined-color, var(--agnosticui-gray-mid-dark));\n  background-color: transparent;\n}\n\n.input-underlined-bg {\n  background-color: var(--agnosticui-input-underlined-bg-color, var(--agnosticui-gray-extra-light));\n}\n\n/**\n* Rounded inputs\n*/\n.input-rounded {\n  border-radius: var(--agnosticui-border-radius, 0.25rem);\n}\n\n/**\n * Errors\n * We provide a class-based approach to setting errors which means we do\n * not support :invalid, so it requires custom use of html4 validation API\n * (see https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation\n * of the example in corresponding input.html file). The reason I elected to\n * not include :invalid, is it seems to result in \"shouting\" at the user as\n * I did not find an easy way to only kick in errors after a certain number\n * of characters have been type (blur is actually better but I did not\n * implement that in the contrived example).\n */\n.label-error {\n  color: var(--agnosticui-input-error-color, var(--agnosticui-error-color));\n}\n.input-error {\n  border-color: var(--agnosticui-input-error-color, var(--agnosticui-error-color));\n}\n\n.label-error,\n.field-error,\n.field-error-small,\n.field-error-large {\n  color: var(--agnosticui-input-error-color, var(--agnosticui-error-color));\n}\n\n.field-help,\n.field-help-small,\n.field-help-large {\n  color: var(--agnosticui-input-help-color, var(--agnosticui-gray-dark));\n}\n\n.field-help,\n.field-help-small,\n.field-help-large,\n.field-error,\n.field-error-small,\n.field-error-large {\n  display: inline-block;\n  width: 100%;\n  margin-block-start: calc(var(--agnosticui-input-vertical-pad, 0.5rem) / 2);\n}\n\n/**\n  * Sizes\n  */\n.input-large {\n  font-size: calc(var(--agnosticui-font-size, 1rem) + 0.25rem);\n  line-height: 1.6rem;\n}\n\n.field-help-large,\n.field-error-large,\n.label-large {\n  /* We initially remove -2px from font-size so setting to font-size essentially adds the 2px back */\n  font-size: var(--agnosticui-font-size, 1rem);\n}\n\n.input-small {\n  font-size: calc(var(--agnosticui-font-size, 1rem) - 0.25rem);\n  line-height: 1rem;\n}\n\n.field-help-small,\n.field-error-small,\n.label-small {\n  font-size: calc(var(--agnosticui-font-size, 1rem) - 0.25rem);\n}\n\n.input:focus {\n  box-shadow: 0 0 0 3px var(--agnosticui-focus-ring-color);\n  /* High contrast mode outline */\n  outline: 3px solid transparent;\n  transition: box-shadow var(--agnosticui-timing-fast) ease-out;\n}\n/* Set the focus to transparent when there's an error since we use\nborders that visually conflict. */\n.input-error:focus {\n  box-shadow: 0 0 0 3px transparent;\n}\n\n/*\n* Disabled State\n*\n* The disabled state uses the class .disabled,\n* and the form attribute disabled=\"disabled\".\n* The use of !important is only added because this is a state\n* that must be applied to all inputs when in a disabled state.\n*/\n.input.disabled, /* DEPRECATED -- TODO remove class based disabled */\n.input:disabled {\n  background: var(--agnosticui-input-disabled-bg, var(--agnosticui-disabled-bg)) !important;\n  color: var(--agnosticui-input-disabled-color, var(--agnosticui-disabled-color)) !important;\n  appearance: none !important;\n  box-shadow: none !important;\n  cursor: not-allowed !important;\n  opacity: 0.8 !important;\n}\n\n@media screen and (-ms-high-contrast: active) {\n  /* High contrast mode outline hacks */\n  .input:disabled {\n    outline: 2px solid transparent;\n    outline-offset: -2px;\n  }\n}\n\n/**\n * Input \"has addon\"\n */\n\n.input-addon-container {\n  display: flex;\n  position: relative;\n  width: 100%;\n  /* Maybe I should have defined another css prop for addon adjustments but trying\n  to avoid any extra variable explosion there--will need to keep an eye on this */\n  --addon-padding: calc(var(--agnosticui-input-side-padding, 0.75rem) * 1.5);\n}\n\n.input-has-left-addon,\n.input-has-right-addon {\n  flex: 1;\n}\n\n.input-has-left-addon {\n  padding-inline-start: calc(var(--addon-padding) * 2.25);\n}\n\n.input-has-right-addon {\n  padding-inline-end: calc(var(--addon-padding) * 2.25);\n}\n\n/*\n* Input addons e.g. icons inside the input\n*/\n.input-addon-right,\n.input-addon-left {\n  /* Maybe I should have defined another css prop for addon adjustments but trying\n  to avoid any extra variable explosion there--will need to keep an eye on this */\n  --addon-padding: calc(var(--agnosticui-input-side-padding) * 1.5);\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n.input-addon-left {\n  left: var(--addon-padding);\n}\n\n.input-addon-right {\n  right: var(--addon-padding);\n}\n",
                    "styleUrl": "./input.css"
                },
                {
                    "data": "/* Angular projected content is hard to add styles too especially if\nusing ng-content select[foo] which we are :( */\n:host ::ng-deep .addOnLeft,\n:host ::ng-deep .addOnRight {\n  --addon-padding: calc(var(--agnosticui-input-side-padding) * 1.5);\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n:host ::ng-deep .addOnLeft {\n  left: var(--addon-padding);\n}\n\n:host ::ng-deep .addOnRight {\n  right: var(--addon-padding);\n}\n",
                    "styleUrl": "./inputaddon-hack.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "ProgressComponent",
            "id": "component-ProgressComponent-c9afd0be372d2273970c1d9dbdc70d10",
            "file": "src/stories/ag/src/lib/progress.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ag-progress",
            "styleUrls": [
                "./progress.css"
            ],
            "styles": [],
            "template": "<progress [ngClass]=\"classes\" [attr.value]=\"value\" [attr.max]=\"max\"></progress>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "css",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string"
                },
                {
                    "name": "max",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "number"
                },
                {
                    "name": "value",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\n@Component({\n  selector: 'ag-progress',\n  template: `<progress [ngClass]=\"classes\" [attr.value]=\"value\" [attr.max]=\"max\"></progress>`,\n  styleUrls: ['./progress.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class ProgressComponent {\n  @Input() value: number = 0;\n  @Input() max: number = 100;\n  @Input() css?: string;\n  public get classes(): string {\n    console.log(this)\n    let klasses = ['progress', this.css?.length ? `${this.css}` : '']\n    klasses = klasses.filter((klass) => klass.length)\n    return klasses.join(' ')\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* https://stackoverflow.com/questions/45507970/how-can-i-change-the-color-of-a-progress-bar-value-in-html */\n/**\n * Most examples show styling directly to the <progress> element itself. However,\n * my tests (chrome, ff, safari on mac mini 2020), showed it's perfectly possibly\n * to use a class selector instead. The reason I'd prefer that here, is that I can\n * then use CSS Modules composes against .progress (e.g. for React/Vue components)\n */\n.progress {\n  -webkit-appearance: none;\n  height: var(--agnosticui-progress-height, 10px);\n  width: 100%;\n  border: none;\n  /* Next couple of rules are required to be here for FF (but not chrome) */\n  background-color: var(--agnosticui-progress-background, #ededed);\n  border-radius: var(--agnosticui-progress-radius, 10px);\n}\n\n.progress[value]::-webkit-progress-bar {\n  /* In my tests chrome requires this whereas FF wants it on the progress {} rule */\n  background-color: var(--agnosticui-progress-background, #ededed);\n  border-radius: var(--agnosticui-progress-radius, 10px);\n}\n\n.progress[value]::-webkit-progress-value {\n  background-color: var(--agnosticui-progress-fill-color, #077acb);\n  border-radius: var(--agnosticui-progress-radius, 10px);\n}\n\n.progress[value]::-moz-progress-bar {\n  background-color: var(--agnosticui-progress-fill-color, #077acb);\n  border-radius: var(--agnosticui-progress-radius, 10px);\n}\n\n.progress[value]::-ms-fill {\n  background-color: var(--agnosticui-progress-fill-color, #077acb);\n  border-radius: var(--agnosticui-progress-radius, 10px);\n}\n",
                    "styleUrl": "./progress.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "string",
                        "returnType": "string",
                        "line": 13
                    }
                }
            }
        },
        {
            "name": "SvgComponent",
            "id": "component-SvgComponent-0550af5fb1b6b64fe071c3bdde5ba0fa",
            "file": "src/stories/ag/src/lib/svg.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ag-sample-svg",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./svg.component.svg"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'ag-sample-svg',\n  templateUrl: './svg.component.svg',\n})\n\nexport class SvgComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<svg\n  class=\"btn-icon\"\n  role=\"img\"\n  viewBox=\"0 0 16 16\"\n  version=\"1.1\"\n  width=\"16\"\n  height=\"16\"\n  aria-hidden=\"true\"\n>\n  <desc>Example icon graphic</desc>\n  <path\n    fill=\"currentColor\"\n    fillRule=\"evenodd\"\n    d=\"M9 12h2l-3 3-3-3h2V7h2v5zm3-8c0-.44-.91-3-4.5-3C5.08 1 3 2.92 3 5 1.02\n5 0 6.52 0 8c0 1.53 1 3 3 3h3V9.7H3C1.38 9.7 1.3 8.28 1.3 8c0-.17.05-1.7\n1.7-1.7h1.3V5c0-1.39 1.56-2.7 3.2-2.7 2.55 0 3.13 1.55 3.2 1.8v1.2H12c.81\n0 2.7.22 2.7 2.2 0 2.09-2.25 2.2-2.7 2.2h-2V11h2c2.08 0 4-1.16 4-3.5C16\n5.06 14.08 4 12 4z\"\n  />\n</svg>"
        },
        {
            "name": "SwitchComponent",
            "id": "component-SwitchComponent-7c4ad125d30719505786562a3874e722",
            "file": "src/stories/ag/src/lib/switch.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ag-switch",
            "styleUrls": [
                "./switch.css"
            ],
            "styles": [],
            "template": "<label [ngClass]=\"switchContainer()\">    <span *ngIf=\"labelPosition == 'left'\" class=\"switch-label\">{{label}}</span>\n    <input type=\"checkbox\" [checked]=\"isChecked\" class=\"switch-input\" [disabled]=\"disabled\"  role=\"switch\" (change)=\"toggleChecked($event)\" />\n    <span [ngClass]=\"switchSpan()\" aria-hidden=\"true\"></span>\n    <span *ngIf=\"labelPosition == 'right'\" class=\"switch-label\">{{label}}</span>\n  </label>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean"
                },
                {
                    "name": "isAction",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean"
                },
                {
                    "name": "isBordered",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean"
                },
                {
                    "name": "isChecked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean"
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string"
                },
                {
                    "name": "labelPosition",
                    "defaultValue": "'left'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string"
                },
                {
                    "name": "size",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "selected",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "switchChecked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "switchContainer",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "switchSpan",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleChecked",
                    "args": [
                        {
                            "name": "ev",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, ChangeDetectionStrategy, Output } from '@angular/core';\n\n@Component({\n  selector: 'ag-switch',\n  template: `<label [ngClass]=\"switchContainer()\">\n    <span *ngIf=\"labelPosition == 'left'\" class=\"switch-label\">{{label}}</span>\n    <input type=\"checkbox\" [checked]=\"isChecked\" class=\"switch-input\" [disabled]=\"disabled\"  role=\"switch\" (change)=\"toggleChecked($event)\" />\n    <span [ngClass]=\"switchSpan()\" aria-hidden=\"true\"></span>\n    <span *ngIf=\"labelPosition == 'right'\" class=\"switch-label\">{{label}}</span>\n  </label>`,\n  styleUrls: ['./switch.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SwitchComponent {\n  @Input() label!: string;\n  @Input() labelPosition: string = 'left';\n  @Input() disabled?: boolean = false;\n  @Input() isAction?: boolean = false;\n  @Input() isBordered?: boolean = false;\n  @Input() size: string = '';\n\n  private switchChecked!: boolean;\n  get isChecked(): boolean {\n    return this.switchChecked;\n  }\n\n  @Input()\n  set isChecked(val: boolean) {\n    this.switchChecked = val;\n  }\n\n  @Output() selected = new EventEmitter<boolean>();\n\n  toggleChecked(ev: Event) {\n    const el = ev.target as HTMLInputElement;\n    if (el.getAttribute('aria-checked') == 'true') {\n      el.setAttribute('aria-checked', 'false');\n      this.switchChecked = false;\n    } else {\n      el.setAttribute('aria-checked', 'true');\n      this.switchChecked = true;\n    }\n    this.selected.emit(this.switchChecked)\n  }\n  switchContainer () {\n    let klasses = [\n      'switch-container',\n      this.labelPosition === 'right' ? 'switch-right' : '',\n      this.disabled ? 'disabled' : '',\n    ];\n    klasses = klasses.filter((klass) => klass.length);\n    return klasses.join(' ');\n  }\n  switchSpan() {\n    let klasses = [\n      'switch',\n      this.isBordered ? 'switch-border' : '',\n      this.isAction ? 'switch-action' : '',\n      this.size ? `switch-${this.size}` : ''\n    ];\n    klasses = klasses.filter((klass) => klass.length);\n    return klasses.join(' ');\n  };\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/**\n * Switch\n * \n * This switch is inspired by Scott Ohara's checkbox switch:\n * https://scottaohara.github.io/a11y_styled_form_controls/src/checkbox--switch/\n */\n.switch-container {\n  display: block;\n  /* TODO: Hopefully this doesn't become a problem but since we use absolute\n  positioning extensively, we need some way to have adjacent spaced lines */\n  min-height: 2.25rem;\n  width: 100%;\n  padding: 0.5rem;\n  position: relative;\n}\n\n.switch-container:hover {\n  cursor: pointer;\n}\n\n/* using the before/after pseudo elements of the span to create the \"switch\" */\n.switch:before,\n.switch:after {\n  border: 1px solid var(--agnosticui-gray-mid-dark);\n  content: '';\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n/* styling specific to the knob of the switch */\n.switch:after {\n  background: #fff;\n  border-radius: 100%;\n  width: 1.4rem;\n  height: 1.4rem;\n  right: 1.4rem;\n  transition: right var(--agnosticui-timing-fast) ease-in-out;\n}\n\n/* styling specific to the knob \"container\" */\n.switch:before {\n  background: #eee;\n  border-radius: 1.75rem;\n  width: 2.75rem;\n  height: 1.75rem;\n  right: 0.25rem;\n  transition: background var(--agnosticui-timing-medium) ease-in-out;\n}\n\n/* Sizes */\n.switch-small:after {\n  width: 1.25rem;\n  height: 1.25rem;\n  right: 1.125rem;\n}\n\n.switch-small:before {\n  width: 2.25rem;\n  height: 1.5rem;\n}\n\n.switch-large:after {\n  width: 1.65rem;\n  height: 1.65rem;\n  right: 1.65rem;\n}\n\n.switch-large:before {\n  width: 3.25rem;\n  height: 2rem;\n}\n\n.switch-border:before {\n  border: 1px solid var(--agnosticui-primary);\n}\n\n.switch-action.switch-border:before {\n  border: 1px solid var(--agnosticui-action);\n}\n\n/* From: https://scottaohara.github.io/a11y_styled_form_controls/src/checkbox--switch/\n  hide the actual checkbox from view, but not from keyboards or ATs.\n  Instead of standard visually hidden styling, instead set opacity to\n  almost 0 (not zero for ChomeVox legacy bug), pointer-events none, and\n  then set to full height/width of container element so that VO focus\n  ring outlines the component, instead of a tiny box within the component\n*/\n.switch-input {\n  margin: 0;\n  opacity: 0.0001;\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n}\n\n.switch-input:focus + .switch:before {\n  box-shadow: 0 0 0 3px var(--agnosticui-focus-ring-color);\n}\n\n/* ---- CHECKED STATE ----- */\n\n/* change the position of the knob to indicate it has been checked*/\n.switch-input:checked + .switch:after {\n  right: 0.5em;\n}\n.switch-input:checked + .switch-small:after {\n  right: 0.425rem;\n}\n\n/* update the color of the \"container\" to further visually indicate state */\n.switch-input:checked + .switch:not(.switch-border):before {\n  background: var(--agnosticui-primary);\n}\n\n.switch-input:checked + .switch-action:not(.switch-border):before {\n  background: var(--agnosticui-action);\n}\n\n/* Border switch on checked the thumb gets primary or action bg respectively */\n.switch-input:checked + .switch-border:after {\n  background: var(--agnosticui-primary);\n}\n.switch-input:checked + .switch-action.switch-border:after {\n  background: var(--agnosticui-action);\n}\n\n/* Switch label on right */\n\n/* Flips transition target to left to preserve our smooth transitions */\n.switch-right .switch:after {\n  transition: left var(--agnosticui-timing-fast) ease-in-out;\n}\n\n.switch-right .switch-input:checked + .switch:after {\n  right: initial;\n  left: 0.5em;\n}\n.switch-right .switch-input:checked + .switch-small:after {\n  right: initial;\n  left: 0.425rem;\n}\n\n/* We have to flip the positioning when the label is on the right of switch */\n.switch-right .switch:before {\n  right: initial;\n  left: 0.25rem;\n}\n\n.switch-right .switch::after {\n  right: initial;\n  left: 1.4rem;\n}\n\n.switch-right .switch-label {\n  position: absolute;\n  top: 0;\n  right: 0;\n}\n\n/* Switch sizes w/label on right -- I expect SMACSS so .switch .switch-small\nclasses should both exist so the right: initial was taken care of above :) */\n.switch-right .switch-small:after {\n  left: 1.125rem;\n}\n\n.switch-right .switch-large:after {\n  left: 1.65rem;\n}\n\n/* Disabled aka :disabled is not actually supported for <label>\nelement so we use attribute selector for that:\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled#:~:text=The%20disabled%20attribute%20is%20supported,control%20or%20its%20descendant%20controls.\n*/\n.switch-input[disabled] + .switch,\n.switch-input[disabled] + .switch-label,\n.switch-container.disabled {\n  color: var(--agnosticui-input-disabled-color, var(--agnosticui-disabled-color)) !important;\n  appearance: none !important;\n  box-shadow: none !important;\n  cursor: not-allowed !important;\n  opacity: 0.8 !important;\n}\n\n@media screen and (-ms-high-contrast: active) {\n  .switch:after {\n    background-color: windowText;\n  }\n\n  /* High contrast mode outline hacks */\n  .switch-input[disabled] + .switch-label,\n  .switch-container.disabled {\n    outline: 2px solid transparent;\n    outline-offset: -2px;\n  }\n}\n",
                    "styleUrl": "./switch.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "isChecked": {
                    "name": "isChecked",
                    "setSignature": {
                        "name": "isChecked",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 28,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "isChecked",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 23
                    }
                }
            }
        },
        {
            "name": "TabPanelComponent",
            "id": "component-TabPanelComponent-f8211b12cf56fda406512d9ef3f8b6da",
            "file": "src/stories/ag/src/lib/tab-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ag-tab-panel",
            "styleUrls": [
                "./tabs.css"
            ],
            "styles": [],
            "template": "<div [hidden]=\"!isActive\" role=\"tabpanel\" [attr.aria-label]=\"title\" class=\"pane\"><ng-content></ng-content></div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean"
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input} from '@angular/core';\n@Component({\n  selector: 'ag-tab-panel',\n  styleUrls: ['./tabs.css'],\n  template: `<div [hidden]=\"!isActive\" role=\"tabpanel\" [attr.aria-label]=\"title\" class=\"pane\"><ng-content></ng-content></div>`,\n})\n\nexport class TabPanelComponent {\n  private _title: string = '';\n  @Input()\n  set title(t: string) {\n    this._title = t;\n  };\n  get title() {\n    return this._title;\n  }\n  @Input() isActive = false;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tab-close {\n  color: var(--agnosticui-gray-dark);\n  text-align: right;\n  cursor: pointer;\n}\n\n.tab-list {\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: row;\n  padding-inline-start: 0;\n  margin-block-end: 0;\n  list-style: none;\n  border-bottom: var(--agnosticui-tabs-border-size, 1px) solid\n    var(--agnosticui-tabs-bgcolor, var(--agnosticui-gray-light));\n  transition-property: all;\n  transition-duration: var(--agnosticui-timing-medium);\n}\n\n/* We can ask for .tab-button which is base and skin combined, or, we can utilize .tab-button-base\nif we'd like to only blank out buttons but otherwise skin ourselves. */\n.tab-button,\n.tab-button-base {\n  /* Blank out the button */\n  background-color: transparent;\n  border: 0;\n  border-radius: 0;\n  box-shadow: none;\n  /* Reset margins/padding; this will get added back if it's a \"skinned\" tab button. However, we have\n  a use case where a tab-button is wrapping a faux button. For that, we don't want margins/padding because\n  the faux button provides that. */\n  margin-inline-start: 0;\n  margin-inline-end: 0;\n  padding-block-start: 0;\n  padding-block-end: 0;\n  padding-inline-start: 0;\n  padding-inline-end: 0;\n}\n\n/* We pull back the 2nd subsequent tabs to remove the double border */\n.tab-button:not(:first-of-type),\n.tab-button-base:not(:first-of-type) {\n  margin-inline-start: -1px;\n}\n\n.tab-button,\n.tab-button-skin {\n  display: block;\n  /* Since this is a \"skinned tab button\" we add our padding here to previously \"reset\" .tab-button-base */\n  padding-block-start: var(--agnosticui-vertical-pad, 0.5rem);\n  padding-block-end: var(--agnosticui-vertical-pad, 0.5rem);\n  padding-inline-start: var(--agnosticui-side-padding, 0.75rem);\n  padding-inline-end: var(--agnosticui-side-padding, 0.75rem);\n  font-family: var(--agnosticui-btn-font-family, var(--agnosticui-font-family));\n  font-weight: var(--agnosticui-btn-font-weight, 400);\n  font-size: var(--agnosticui-btn-font-size, 1rem);\n  /* this can be overriden, but it might mess with the balance of the button heights across variants */\n  line-height: var(--agnosticui-line-height, 1.25rem);\n  color: var(--agnosticui-tabs-primary, var(--agnosticui-primary));\n  text-decoration: none;\n  transition: color var(--agnosticui-timing-fast) ease-in-out,\n    background-color var(--agnosticui-timing-fast) ease-in-out,\n    border-color var(--agnosticui-timing-fast) ease-in-out;\n}\n\n.tab-borderless {\n  border: none !important;\n}\n\n.tab-button-large {\n  padding-block-start: calc(var(--agnosticui-input-side-padding) * 1.25);\n  padding-block-end: calc(var(--agnosticui-input-side-padding) * 1.25);\n  padding-inline-start: calc(var(--agnosticui-input-side-padding) * 1.75);\n  padding-inline-end: calc(var(--agnosticui-input-side-padding) * 1.75);\n}\n\n.tab-button-jumbo {\n  padding-block-start: calc(var(--agnosticui-input-side-padding) * 2);\n  padding-block-end: calc(var(--agnosticui-input-side-padding) * 2);\n  padding-inline-start: calc(var(--agnosticui-input-side-padding) * 3);\n  padding-inline-end: calc(var(--agnosticui-input-side-padding) * 3);\n}\n.tab-item.tab-button {\n  margin-block-end: -1px;\n  background: 0 0;\n  border: 1px solid transparent;\n  border-top-left-radius: var(--agnosticui-tabs-radius, 0.25rem);\n  border-top-right-radius: var(--agnosticui-tabs-radius, 0.25rem);\n}\n\n.tab-item.tab-button.active {\n  color: var(--agnosticui-gray-dark);\n  /* TODO -- update these colors to use css properties */\n  background-color: #fff;\n  border-color: #dee2e6 #dee2e6 #fff;\n}\n\n.tab-item:hover,\n.tab-button:focus {\n  border-color: #e9ecef #e9ecef #dee2e6;\n  isolation: isolate;\n  cursor: pointer;\n}\n\n.tab-button:disabled {\n  color: var(--agnosticui-tabas-disabled-bg, var(--agnosticui-gray-mid-dark));\n  background-color: transparent;\n  border-color: transparent;\n  opacity: 0.8;\n}\n\n.pane {\n  padding: 1em;\n}\n",
                    "styleUrl": "./tabs.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "title": {
                    "name": "title",
                    "setSignature": {
                        "name": "title",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "t",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 11,
                        "jsdoctags": [
                            {
                                "name": "t",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "title",
                        "type": "",
                        "returnType": "",
                        "line": 14
                    }
                }
            }
        },
        {
            "name": "TabsComponent",
            "id": "component-TabsComponent-577d65deea4c0c10edb14ff37f849795",
            "file": "src/stories/ag/src/lib/tabs.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ag-tabs",
            "styleUrls": [
                "./tabs.css"
            ],
            "styles": [],
            "template": "<div class=\"tab-list\" role=\"tablist\" aria-label=\"Tabs\">\n  <div\n    *ngFor=\"let panel of tabPanels; index as i\"\n    (click)=\"selectPanel(panel)\"\n  >\n    <ng-container *ngIf=\"!tabButtonTemplate\">\n      <button\n        role=\"tab\"\n        class=\"tab-item tab-button\"\n        [class.active]=\"panel.isActive\"\n        [class.tab-button-large]=\"size === 'large'\"\n        [class.tab-button-jumbo]=\"size === 'jumbo'\"\n        [attr.aria-selected]=\"panel.isActive\"\n      >\n        {{ panel.title }}\n      </button>\n    </ng-container>\n    <ng-container\n      *ngIf=\"tabButtonTemplate\"\n      [ngTemplateOutlet]=\"tabButtonTemplate\"\n      [ngTemplateOutletContext]=\"{ $implicit: panel, index: i }\"\n    >\n    </ng-container>\n  </div>\n</div>\n<ng-content></ng-content>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "size",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "selectionChanged",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "tabButtonTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any> | undefined",
                    "optional": false,
                    "description": "<p>This is used to allow consumer to provide their own custom tab buttons like:\n&lt;ng-template #tabButtonTemplate let-tab let-index&gt;\n&lt;ag-button\ntype=&quot;faux&quot;\n[isBordered]=&quot;true&quot;\nmode=&quot;primary&quot;\nrole=&quot;tab&quot;\n[attr.aria-selected]=&quot;tab.isActive&quot;</p>\n<blockquote>\n</blockquote>\n<p>{{ tab.title }}\n</ag-button>\n</ng-template></p>\n",
                    "line": 67,
                    "rawdescription": "\n\nThis is used to allow consumer to provide their own custom tab buttons like:\n<ng-template #tabButtonTemplate let-tab let-index>\n<ag-button\ntype=\"faux\"\n[isBordered]=\"true\"\nmode=\"primary\"\nrole=\"tab\"\n[attr.aria-selected]=\"tab.isActive\"\n>\n{{ tab.title }}\n</ag-button>\n</ng-template>\n",
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "'tabButtonTemplate'"
                        }
                    ]
                },
                {
                    "name": "tabPanels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<TabPanelComponent>",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "TabPanelComponent"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectPanel",
                    "args": [
                        {
                            "name": "tabPanel",
                            "type": "TabPanelComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tabPanel",
                            "type": "TabPanelComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  QueryList,\n  TemplateRef,\n  ChangeDetectionStrategy,\n  Input,\n  ContentChild,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { TabPanelComponent } from './tab-panel.component';\n@Component({\n  selector: 'ag-tabs',\n  template: `\n    <div class=\"tab-list\" role=\"tablist\" aria-label=\"Tabs\">\n      <div\n        *ngFor=\"let panel of tabPanels; index as i\"\n        (click)=\"selectPanel(panel)\"\n      >\n        <ng-container *ngIf=\"!tabButtonTemplate\">\n          <button\n            role=\"tab\"\n            class=\"tab-item tab-button\"\n            [class.active]=\"panel.isActive\"\n            [class.tab-button-large]=\"size === 'large'\"\n            [class.tab-button-jumbo]=\"size === 'jumbo'\"\n            [attr.aria-selected]=\"panel.isActive\"\n          >\n            {{ panel.title }}\n          </button>\n        </ng-container>\n        <ng-container\n          *ngIf=\"tabButtonTemplate\"\n          [ngTemplateOutlet]=\"tabButtonTemplate\"\n          [ngTemplateOutletContext]=\"{ $implicit: panel, index: i }\"\n        >\n        </ng-container>\n      </div>\n    </div>\n    <ng-content></ng-content>\n  `,\n  styleUrls: ['./tabs.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabsComponent implements AfterContentInit {\n  @ContentChildren(TabPanelComponent) tabPanels!: QueryList<TabPanelComponent>;\n\n  @Input() size?: string = '';\n\n  /**\n   * This is used to allow consumer to provide their own custom tab buttons like:\n   * <ng-template #tabButtonTemplate let-tab let-index>\n      <ag-button\n        type=\"faux\"\n        [isBordered]=\"true\"\n        mode=\"primary\"\n        role=\"tab\"\n        [attr.aria-selected]=\"tab.isActive\"\n      >\n        {{ tab.title }}\n      </ag-button>\n    </ng-template>\n  */\n  @ContentChild('tabButtonTemplate')\n  tabButtonTemplate: TemplateRef<any> | undefined;\n\n  @Output()\n  selectionChanged = new EventEmitter();\n\n  ngAfterContentInit() {\n    let activeTabs = this.tabPanels.filter((tab) => tab.isActive);\n    if (activeTabs.length === 0) {\n      this.selectPanel(this.tabPanels.first);\n    }\n  }\n\n  selectPanel(tabPanel: TabPanelComponent) {\n    // First deactivate all tabs, then select passed in tab\n    this.tabPanels.toArray().forEach((tab) => {\n      tab.isActive = false;\n    });\n    tabPanel.isActive = true;\n    this.selectionChanged.emit(tabPanel);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tab-close {\n  color: var(--agnosticui-gray-dark);\n  text-align: right;\n  cursor: pointer;\n}\n\n.tab-list {\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: row;\n  padding-inline-start: 0;\n  margin-block-end: 0;\n  list-style: none;\n  border-bottom: var(--agnosticui-tabs-border-size, 1px) solid\n    var(--agnosticui-tabs-bgcolor, var(--agnosticui-gray-light));\n  transition-property: all;\n  transition-duration: var(--agnosticui-timing-medium);\n}\n\n/* We can ask for .tab-button which is base and skin combined, or, we can utilize .tab-button-base\nif we'd like to only blank out buttons but otherwise skin ourselves. */\n.tab-button,\n.tab-button-base {\n  /* Blank out the button */\n  background-color: transparent;\n  border: 0;\n  border-radius: 0;\n  box-shadow: none;\n  /* Reset margins/padding; this will get added back if it's a \"skinned\" tab button. However, we have\n  a use case where a tab-button is wrapping a faux button. For that, we don't want margins/padding because\n  the faux button provides that. */\n  margin-inline-start: 0;\n  margin-inline-end: 0;\n  padding-block-start: 0;\n  padding-block-end: 0;\n  padding-inline-start: 0;\n  padding-inline-end: 0;\n}\n\n/* We pull back the 2nd subsequent tabs to remove the double border */\n.tab-button:not(:first-of-type),\n.tab-button-base:not(:first-of-type) {\n  margin-inline-start: -1px;\n}\n\n.tab-button,\n.tab-button-skin {\n  display: block;\n  /* Since this is a \"skinned tab button\" we add our padding here to previously \"reset\" .tab-button-base */\n  padding-block-start: var(--agnosticui-vertical-pad, 0.5rem);\n  padding-block-end: var(--agnosticui-vertical-pad, 0.5rem);\n  padding-inline-start: var(--agnosticui-side-padding, 0.75rem);\n  padding-inline-end: var(--agnosticui-side-padding, 0.75rem);\n  font-family: var(--agnosticui-btn-font-family, var(--agnosticui-font-family));\n  font-weight: var(--agnosticui-btn-font-weight, 400);\n  font-size: var(--agnosticui-btn-font-size, 1rem);\n  /* this can be overriden, but it might mess with the balance of the button heights across variants */\n  line-height: var(--agnosticui-line-height, 1.25rem);\n  color: var(--agnosticui-tabs-primary, var(--agnosticui-primary));\n  text-decoration: none;\n  transition: color var(--agnosticui-timing-fast) ease-in-out,\n    background-color var(--agnosticui-timing-fast) ease-in-out,\n    border-color var(--agnosticui-timing-fast) ease-in-out;\n}\n\n.tab-borderless {\n  border: none !important;\n}\n\n.tab-button-large {\n  padding-block-start: calc(var(--agnosticui-input-side-padding) * 1.25);\n  padding-block-end: calc(var(--agnosticui-input-side-padding) * 1.25);\n  padding-inline-start: calc(var(--agnosticui-input-side-padding) * 1.75);\n  padding-inline-end: calc(var(--agnosticui-input-side-padding) * 1.75);\n}\n\n.tab-button-jumbo {\n  padding-block-start: calc(var(--agnosticui-input-side-padding) * 2);\n  padding-block-end: calc(var(--agnosticui-input-side-padding) * 2);\n  padding-inline-start: calc(var(--agnosticui-input-side-padding) * 3);\n  padding-inline-end: calc(var(--agnosticui-input-side-padding) * 3);\n}\n.tab-item.tab-button {\n  margin-block-end: -1px;\n  background: 0 0;\n  border: 1px solid transparent;\n  border-top-left-radius: var(--agnosticui-tabs-radius, 0.25rem);\n  border-top-right-radius: var(--agnosticui-tabs-radius, 0.25rem);\n}\n\n.tab-item.tab-button.active {\n  color: var(--agnosticui-gray-dark);\n  /* TODO -- update these colors to use css properties */\n  background-color: #fff;\n  border-color: #dee2e6 #dee2e6 #fff;\n}\n\n.tab-item:hover,\n.tab-button:focus {\n  border-color: #e9ecef #e9ecef #dee2e6;\n  isolation: isolate;\n  cursor: pointer;\n}\n\n.tab-button:disabled {\n  color: var(--agnosticui-tabas-disabled-bg, var(--agnosticui-gray-mid-dark));\n  background-color: transparent;\n  border-color: transparent;\n  opacity: 0.8;\n}\n\n.pane {\n  padding: 1em;\n}\n",
                    "styleUrl": "./tabs.css"
                }
            ],
            "stylesData": "",
            "implements": [
                "AfterContentInit"
            ]
        }
    ],
    "modules": [
        {
            "name": "ButtonGroupModule",
            "id": "module-ButtonGroupModule-6387923b588be42e0cfd753787d6388a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/stories/ag/src/lib/buttongroup.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ButtonGroupComponent } from './buttongroup.component';\n\n@NgModule({\n   imports: [CommonModule],\n   declarations: [ButtonGroupComponent],\n   exports: [ButtonGroupComponent]\n})\nexport class ButtonGroupModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonGroupComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonGroupComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ButtonModule",
            "id": "module-ButtonModule-f53487a9e9d5ee113a743e3367a2d407",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/stories/ag/src/lib/button.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ButtonComponent } from './button.component';\n\n@NgModule({\n   imports: [CommonModule],\n   declarations: [ButtonComponent],\n   exports: [ButtonComponent]\n})\nexport class ButtonModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CardModule",
            "id": "module-CardModule-a83464592d9d0cc3e9082a83300c0ee6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/stories/ag/src/lib/card.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CardComponent } from './card.component';\n\n@NgModule({\n   imports: [CommonModule],\n   declarations: [CardComponent],\n   exports: [CardComponent]\n})\nexport class CardModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CardComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CardComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ChoiceInputModule",
            "id": "module-ChoiceInputModule-2eb7254239198c23a4162717a067e8c3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/stories/ag/src/lib/choice-input.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ChoiceInputComponent } from './choice-input.component';\n@NgModule({\n   imports: [CommonModule],\n   declarations: [ChoiceInputComponent],\n   exports: [ChoiceInputComponent]\n})\nexport class ChoiceInputModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ChoiceInputComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ChoiceInputComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HeaderModule",
            "id": "module-HeaderModule-fceb2fe343b6c5c06efde778fab0880d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/stories/ag/src/lib/header.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { HeaderComponent, HeaderNavComponent, HeaderNavItemComponent } from './header.component';\n@NgModule({\n   imports: [CommonModule],\n   declarations: [HeaderComponent, HeaderNavComponent, HeaderNavItemComponent],\n   exports: [HeaderComponent, HeaderNavComponent, HeaderNavItemComponent]\n})\nexport class HeaderModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "HeaderNavComponent"
                        },
                        {
                            "name": "HeaderNavItemComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "HeaderNavComponent"
                        },
                        {
                            "name": "HeaderNavItemComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InputModule",
            "id": "module-InputModule-ef9cb916fd9b4ba60881daaeeb1a2dcb",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/stories/ag/src/lib/input.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { InputComponent } from './input.component';\n@NgModule({\n   imports: [CommonModule],\n   declarations: [InputComponent],\n   exports: [InputComponent]\n})\nexport class InputModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "InputComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "InputComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProgressModule",
            "id": "module-ProgressModule-c34aaaf96a474dd9bc4654c03aec98be",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/stories/ag/src/lib/progress.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ProgressComponent } from './progress.component';\n@NgModule({\n   imports: [CommonModule],\n   declarations: [ProgressComponent],\n   exports: [ProgressComponent]\n})\nexport class ProgressModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ProgressComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ProgressComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SwitchModule",
            "id": "module-SwitchModule-e7c90c7fe17d395dd17237384b06d19a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/stories/ag/src/lib/switch.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { SwitchComponent } from './switch.component';\n@NgModule({\n   imports: [CommonModule],\n   declarations: [SwitchComponent],\n   exports: [SwitchComponent]\n})\nexport class SwitchModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SwitchComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SwitchComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TabModule",
            "id": "module-TabModule-60f234b12439914b575267920e9b4448",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/stories/ag/src/lib/tab-panel.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { TabPanelComponent } from './tab-panel.component';\n\n@NgModule({\n   imports: [CommonModule],\n   declarations: [TabPanelComponent],\n   exports: [TabPanelComponent]\n})\nexport class TabModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TabPanelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TabPanelComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TabsModule",
            "id": "module-TabsModule-4f8acea482e47f87535c4b99042b17b0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/stories/ag/src/lib/tabs.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { TabsComponent } from './tabs.component';\n\n@NgModule({\n   imports: [CommonModule],\n   declarations: [TabsComponent],\n   exports: [TabsComponent]\n})\nexport class TabsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TabsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TabsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "actions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  onClicked: action('onClicked')\n}"
            },
            {
                "name": "actions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/ButtonGroup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  onClicked: action('onClicked')\n}"
            },
            {
                "name": "actions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/ButtonIcon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  onClicked: action('onClicked')\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  changed: action('changed'),\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/choice-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  selected: action('selected'),\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/switch.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  selected: action('selected'),\n}"
            },
            {
                "name": "All",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/choice-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ChoiceInputComponent>",
                "defaultValue": "(args: ChoiceInputComponent) => ({\n  props: {\n    propInput: {\n      selected: actionsData.selected,\n    },\n    disabledOptions: ['weekly', 'monthly'],\n    reusableOptions: [\n      {\n        name: 'frequency',\n        value: 'daily',\n        label: 'Daily',\n      },\n      {\n        name: 'frequency',\n        value: 'weekly',\n        label: 'Weekly',\n      },\n      {\n        name: 'frequency',\n        value: 'monthly',\n        label: 'Monthly',\n      },\n    ]\n  },\n  template: `<div>\n    <h1 style=\"margin: 1rem 0;\">Checkboxes</h1>\n    <ag-choice-input type=\"checkbox\" [options]=\"reusableOptions\" legendLabel=\"Legend\" (selected)=\"propInput.selected($event)\"></ag-choice-input>\n    <ag-choice-input type=\"checkbox\" [isDisabled]=\"true\" [options]=\"reusableOptions\" legendLabel=\"Disabled\" (selected)=\"propInput.selected($event)\"></ag-choice-input>\n    <ag-choice-input type=\"checkbox\" [options]=\"reusableOptions\" [disabledOptions]=\"disabledOptions\" legendLabel=\"Specific options disabled\" (selected)=\"propInput.selected($event)\"></ag-choice-input>\n    <ag-choice-input type=\"checkbox\" [options]=\"reusableOptions\" [disabledOptions]=\"disabledOptions\" [isFieldset]=\"false\" legendLabel=\"Fieldset hidden\" (selected)=\"propInput.selected($event)\"></ag-choice-input>\n    <ag-choice-input type=\"checkbox\" [options]=\"reusableOptions\" [isInline]=\"true\" legendLabel=\"Inline\" (selected)=\"propInput.selected($event)\"></ag-choice-input>\n    <ag-choice-input type=\"checkbox\" [options]=\"reusableOptions\" [isInline]=\"true\" size=\"small\" legendLabel=\"Small\" (selected)=\"propInput.selected($event)\"></ag-choice-input>\n    <ag-choice-input type=\"checkbox\" [options]=\"reusableOptions\" [isInline]=\"true\" size=\"large\" legendLabel=\"Large\" (selected)=\"propInput.selected($event)\"></ag-choice-input>\n    <ag-choice-input type=\"checkbox\" [options]=\"reusableOptions\" checkedOptions=\"['daily', 'weekly']\" [isInline]=\"true\" size=\"large\" legendLabel=\"Prechecked options\" (selected)=\"propInput.selected($event)\"></ag-choice-input>\n    <h1 style=\"margin: 1rem 0;\">Radios</h1>\n    <ag-choice-input type=\"radio\" [options]=\"reusableOptions\" legendLabel=\"Radio legend\" (selected)=\"propInput.selected($event)\"></ag-choice-input>\n    <ag-choice-input type=\"radio\" [options]=\"reusableOptions\" [isDisabled]=\"true\" legendLabel=\"Disabled\" (selected)=\"propInput.selected($event)\"></ag-choice-input>\n    <ag-choice-input type=\"radio\" [options]=\"[{ name: 'numbers', value: 'one', label: 'one'}, { name: 'numbers', value: 'two', label: 'two' }, { name: 'numbers', value: 'three', label: 'three' }]\"\n      [disabledOptions]=\"['two']\" legendLabel=\"Specific options disabled\" (selected)=\"propInput.selected($event)\"></ag-choice-input>\n    <ag-choice-input type=\"radio\" [options]=\"[{ name: 'es', value: 'uno', label: 'uno'}, { name: 'es', value: 'dos', label: 'dos' }, { name: 'es', value: 'tres', label: 'tres' }]\"\n      legendLabel=\"Fieldset hidden\" [isFieldset]=\"false\" (selected)=\"propInput.selected($event)\"></ag-choice-input>\n    <ag-choice-input type=\"radio\" [options]=\"[{ name: 'colors', value: 'blue', label: 'Blue'}, { name: 'colors', value: 'red', label: 'Red' }, { name: 'colors', value: 'silver', label: 'Silver' }]\"\n      legendLabel=\"Inline\" [isInline]=\"true\" (selected)=\"propInput.selected($event)\"></ag-choice-input>\n    <ag-choice-input type=\"radio\" [options]=\"[{ name: 'bands', value: 'bonjovi', label: 'Bon Jovi'}, { name: 'bands', value: 'stones', label: 'Rolling Stones' }, { name: 'bands', value: 'isleybros', label: 'Isley Brothers' }]\"\n      legendLabel=\"Large\" size=\"large\" [isInline]=\"true\" (selected)=\"propInput.selected($event)\"></ag-choice-input>\n\n    <ag-choice-input type=\"radio\" [options]=\"[{ name: 'solo', value: 'stevie', label: 'Stevie Wonder'}, { name: 'solo', value: 'whitney', label: 'Whitney Houston' }, { name: 'solo', value: 'charlie', label: 'Charlie Wilson' }]\"\n      [checkedOptions]=\"['charlie']\" legendLabel=\"Prechecked option\" size=\"large\" [isInline]=\"true\" (selected)=\"propInput.selected($event)\"></ag-choice-input>\n  </div>` \n})"
            },
            {
                "name": "BlankButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BlockButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BlockPrimaryButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BlockSecondaryButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Bordered",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ButtonIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/ButtonIcon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "CircleButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "CssAndAria",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/ButtonGroup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "CssPropButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Tabs.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  template: `<ag-tabs>\n      <ag-tab-panel title=\"Tab 1\">\n        Tab 1 content\n      </ag-tab-panel>\n      <ag-tab-panel title=\"Tab 2\">\n        Tab 2 content\n      </ag-tab-panel>\n    </ag-tabs>\n  `,\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<InputComponent>",
                "defaultValue": "(args: InputComponent) => ({\n  props: {\n    propInput: {\n      changed: actionsData.changed,\n    },\n  },\n  template: `<div>\n    <ag-input\n      uniqueId=\"aginput-${uuid()}\"\n      placeholder=\"Enter name…\"\n      label=\"Default input\"\n      type=\"text\"\n      (changed)=\"propInput.changed($event)\"\n    ></ag-input>`\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/progress.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DisabledButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "FauxTypeButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "HeaderExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "HelpText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<InputComponent>",
                "defaultValue": "(args: InputComponent) => ({\n  props: {\n    propInput: {\n      changed: actionsData.changed,\n    },\n  },\n  template: `<div>\n    <ag-input\n      uniqueId=\"aginput-${uuid()}\"\n      label=\"Help text\"\n      placeholder=\"Help text…\"\n      type=\"text\"\n      helpText=\"Some useful help text.\"\n      (changed)=\"propInput.changed($event)\"\n    ></ag-input>\n  </div>`\n})"
            },
            {
                "name": "Inline",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<InputComponent>",
                "defaultValue": "(args: InputComponent) => ({\n  props: {\n    propInput: {\n      changed: actionsData.changed,\n    },\n  },\n  template: `<div>\n    <ag-input\n      uniqueId=\"aginput-${uuid()}\"\n      label=\"Inline input\"\n      placeholder=\"Inline input…\"\n      [isInline]=\"true\"\n      type=\"text\"\n      (changed)=\"propInput.changed($event)\"\n    ></ag-input>\n  </div>`\n})"
            },
            {
                "name": "InputAddons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<InputComponent>",
                "defaultValue": "(args: InputComponent) => ({\n  props: {\n    propInput: {\n      changed: actionsData.changed,\n    },\n  },\n  \n  // Note: we need to use Angular selectors and classes of the same name for the addons\n  // that are projected like follows:\n  // <div addOnLeft class=\"addOnLeft\"><span>L</span></div>\n  // <div addOnRight class=\"addOnRight\"><span>R</span></div>\n  template: `<div>\n    <h1>Input with addons</h1>\n    <ag-input\n      uniqueId=\"aginput-${uuid()}\"\n      hasLeftAddon=\"true\"\n      hasRightAddon=\"true\"\n      label=\"Input with addons\"\n      type=\"text\"\n      (changed)=\"propInput.changed($event)\"\n    >\n      <div addOnLeft class=\"addOnLeft\"><span>L</span></div>\n      <div addOnRight class=\"addOnRight\"><span>R</span></div>\n    </ag-input>\n  </div>`\n})"
            },
            {
                "name": "InvalidLargeText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<InputComponent>",
                "defaultValue": "(args: InputComponent) => ({\n  props: {\n    propInput: {\n      changed: actionsData.changed,\n    },\n  },\n  template: `<div>\n    <ag-input\n      uniqueId=\"aginput-${uuid()}\"\n      label=\"Invalid text large\"\n      placeholder=\"Invalid text…\"\n      type=\"text\"\n      size=\"large\"\n      invalidText=\"This field has errors.\"\n      [isInvalid]=\"true\"\n      (changed)=\"propInput.changed($event)\"\n    ></ag-input>\n  </div>`\n})"
            },
            {
                "name": "InvalidSmallText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<InputComponent>",
                "defaultValue": "(args: InputComponent) => ({\n  props: {\n    propInput: {\n      changed: actionsData.changed,\n    },\n  },\n  template: `<div>\n    <ag-input\n      uniqueId=\"aginput-${uuid()}\"\n      label=\"Invalid text small\"\n      placeholder=\"Invalid text small…\"\n      type=\"text\"\n      invalidText=\"This field has errors.\"\n      [isInvalid]=\"true\"\n      (changed)=\"propInput.changed($event)\"\n    ></ag-input>\n  </div>`\n})"
            },
            {
                "name": "InvalidText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<InputComponent>",
                "defaultValue": "(args: InputComponent) => ({\n  props: {\n    propInput: {\n      changed: actionsData.changed,\n    },\n  },\n  template: `<div>\n    <ag-input\n      uniqueId=\"aginput-${uuid()}\"\n      label=\"Invalid text\"\n      placeholder=\"Invalid text…\"\n      type=\"text\"\n      invalidText=\"This field has errors.\"\n      [isInvalid]=\"true\"\n      (changed)=\"propInput.changed($event)\"\n    ></ag-input>\n  </div>`\n})"
            },
            {
                "name": "Jumbo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Tabs.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  template: `<ag-tabs size=\"jumbo\">\n      <ag-tab-panel title=\"Tab 1\">\n        Tab 1 content\n      </ag-tab-panel>\n      <ag-tab-panel title=\"Tab 2\">\n        Tab 2 content\n      </ag-tab-panel>\n    </ag-tabs>\n  `,\n})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Tabs.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  template: `<ag-tabs size=\"large\">\n      <ag-tab-panel title=\"Tab 1\">\n        Tab 1 content\n      </ag-tab-panel>\n      <ag-tab-panel title=\"Tab 2\">\n        Tab 2 content\n      </ag-tab-panel>\n    </ag-tabs>\n  `,\n})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<InputComponent>",
                "defaultValue": "(args: InputComponent) => ({\n  props: {\n    propInput: {\n      changed: actionsData.changed,\n    },\n  },\n  template: `<div>\n    <ag-input\n      uniqueId=\"aginput-${uuid()}\"\n      label=\"Large input\"\n      placeholder=\"Large input…\"\n      size=\"large\"\n      [isRounded]=\"true\"\n      type=\"text\"\n      (changed)=\"propInput.changed($event)\"\n    ></ag-input>\n  </div>`\n})"
            },
            {
                "name": "NoSkin",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "RaisedButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "RaisedPrimaryButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "ResetButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Rounded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Rounded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<InputComponent>",
                "defaultValue": "(args: InputComponent) => ({\n  props: {\n    propInput: {\n      changed: actionsData.changed,\n    },\n  },\n  template: `<div>\n    <ag-input\n      uniqueId=\"aginput-${uuid()}\"\n      label=\"Rounded input\"\n      placeholder=\"Rounded input…\"\n      [isRounded]=\"true\"\n      type=\"text\"\n      (changed)=\"propInput.changed($event)\"\n    ></ag-input>\n  </div>`\n})"
            },
            {
                "name": "sampleSvgIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/ButtonIcon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n<svg\n  class=\"btn-icon\"\n  style=\"margin-left: 6px; margin-right: 6px;\"\n  role=\"img\"\n  viewBox=\"0 0 16 16\"\n  version=\"1.1\"\n  width=\"16\"\n  height=\"16\"\n  aria-hidden=\"true\"\n>\n  <desc>Example icon graphic</desc>\n  <path\n    fill=\"currentColor\"\n    fillRule=\"evenodd\"\n    d=\"M9 12h2l-3 3-3-3h2V7h2v5zm3-8c0-.44-.91-3-4.5-3C5.08 1 3 2.92 3 5 1.02\n5 0 6.52 0 8c0 1.53 1 3 3 3h3V9.7H3C1.38 9.7 1.3 8.28 1.3 8c0-.17.05-1.7\n1.7-1.7h1.3V5c0-1.39 1.56-2.7 3.2-2.7 2.55 0 3.13 1.55 3.2 1.8v1.2H12c.81\n0 2.7.22 2.7 2.2 0 2.09-2.25 2.2-2.7 2.2h-2V11h2c2.08 0 4-1.16 4-3.5C16\n5.06 14.08 4 12 4z\"\n  />\n</svg>`"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<InputComponent>",
                "defaultValue": "(args: InputComponent) => ({\n  props: {\n    propInput: {\n      changed: actionsData.changed,\n    },\n  },\n  template: `<div>\n    <ag-input\n      uniqueId=\"aginput-${uuid()}\"\n      label=\"Small input\"\n      placeholder=\"Small input…\"\n      size=\"small\"\n      [isRounded]=\"true\"\n      type=\"text\"\n      (changed)=\"propInput.changed($event)\"\n    ></ag-input>\n  </div>`\n})"
            },
            {
                "name": "SubmitButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SwitchExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/switch.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "TabsAll",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonComponent>",
                "defaultValue": "(args: ButtonComponent) => ({\n  props: {\n    propInput: {\n      onClicked: actions.onClicked,\n      type: args.type || 'button',\n      size: args.size || 'medium',\n      css: args.css || undefined,\n      mode: args.mode || undefined,\n      isBordered: args.isBordered || false,\n      isBlock: args.isBlock || false,\n      isBlank: args.isBlank || false,\n      isRaised: args.isRaised|| false,\n      isCircle: args.isCircle || false,\n      // Literally look if false otherwise it's true ¯\\_(ツ)_/¯\n      isSkinned: args.isSkinned === false ? args.isSkinned : true,\n      isRounded: args.isRounded || false,\n      isDisabled: args.isDisabled || false,\n    }\n  },\n  template: `<ag-button\n    [mode]=\"propInput.mode\"\n    [isBlank]=\"propInput.isBlank\"\n    [type]=\"propInput.type\"\n    [size]=\"propInput.size\"\n    [css]=\"propInput.css\"\n    [isBordered]=\"propInput.isBordered\"\n    [isRaised]=\"propInput.isRaised\"\n    [isDisabled]=\"propInput.isDisabled\"\n    [isCircle]=\"propInput.isCircle\"\n    [isBlock]=\"propInput.isBlock\"\n    [isSkinned]=\"propInput.isSkinned\"\n    [isRounded]=\"propInput.isRounded\"\n    (handleClick)=\"propInput.onClicked($event)\"\n  >Go</ag-button>`,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/ButtonGroup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonGroupComponent>",
                "defaultValue": "(args: ButtonGroupComponent) => ({\n  props: {\n    propInput: {\n      css: args.css || undefined,\n      ariaLabel: args.ariaLabel || undefined,\n      onClicked: actions.onClicked,\n    },\n  },\n  template: `<ag-button-group [css]=\"propInput.css\" [ariaLabel]=\"propInput.ariaLabel\">\n    <div class=\"btn-first-wrap\">\n      <ag-button mode=\"primary\" [isBordered]=\"true\" (onClick)=\"propInput.onClicked($event)\">Button 1</ag-button>\n    </div>\n    <ag-button mode=\"primary\" [isBordered]=\"true\" (onClick)=\"propInput.onClicked($event)\">Button 2</ag-button>\n    <ag-button mode=\"primary\" [isBordered]=\"true\" (onClick)=\"propInput.onClicked($event)\">Button 3</ag-button>\n    <div class=\"btn-last-wrap\">\n      <ag-button mode=\"primary\" [isBordered]=\"true\" (onClick)=\"propInput.onClicked($event)\">Button 4</ag-button>\n    </div>\n  </ag-button-group>`,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/ButtonIcon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonComponent>",
                "defaultValue": "(args: ButtonComponent) => ({\n  props: {\n    propInput: {\n      onClicked: actions.onClicked\n    },\n  },\n  template: `<div>\n    <ag-button [mode]=\"primary\" (onClick)=\"propInput.onClicked($event)\">\n    ${sampleSvgIcon} \n    Icon Left</ag-button>\n  </div>\n  <div style=\"margin-top: 32px;\">\n    <ag-button [mode]=\"primary\" (onClick)=\"propInput.onClicked($event)\">\n      Icon Right \n      ${sampleSvgIcon} \n    </ag-button>\n  </div>`,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<HeaderComponent>",
                "defaultValue": "(args: HeaderComponent) => ({\n  template: `<ag-header isSticky=\"true\">\n    <ag-header-nav>\n      <ag-header-nav-item style=\"margin-right: 8px;\">\n        <a style=\"color: '#333333'; textDecoration: 'none';\" href=\"#\">\n          Home\n        </a>\n      </ag-header-nav-item>\n      <ag-header-nav-item>\n        <a style=\"color: '#333333'; textDecoration: 'none';\" href=\"#\">\n          Services\n        </a>\n      </ag-header-nav-item>\n    </ag-header-nav>\n  </ag-header>`\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CardComponent>",
                "defaultValue": "(args: CardComponent) => ({\n  template: `\n    <ag-card>\n      <div style=\"padding: 24px;\">Default</div>\n      <div style=\"padding: 24px;\">Card</div>\n    </ag-card>\n    <ag-card isStacked=\"true\">\n      <div style=\"padding: 24px;\">Stacked</div>\n      <div style=\"padding: 24px;\">Card</div>\n    </ag-card>\n    <ag-card isStacked=\"true\" isAnimated=\"true\">\n      <div style=\"padding: 24px;\">Stacked & Animated</div>\n      <div style=\"padding: 24px;\">Card</div>\n    </ag-card>\n    <ag-card isSkinned=\"false\">\n      <div style=\"padding: 24px;\">Base Card</div>\n      <div style=\"padding: 24px;\">No Skin</div>\n    </ag-card>\n    <ag-card css=\"addition-classes\">\n      <div style=\"padding: 24px;\">Custom CSS Class Overrides</div>\n      <div style=\"padding: 24px;\">Inspect to see additional-classes</div>\n    </ag-card>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/progress.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ProgressComponent>",
                "defaultValue": "(args: ProgressComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/switch.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SwitchComponent>",
                "defaultValue": "(args: SwitchComponent) => ({\n  props: {\n    propInput: {\n      selected: actionsData.selected,\n    }\n  },\n  template: `<div>\n    <ag-switch label=\"Small\" size=\"small\" labelPosition=\"right\" (selected)=\"propInput.selected($event)\"></ag-switch>\n    <ag-switch label=\"Switch default\" (selected)=\"propInput.selected($event)\"></ag-switch>\n    <ag-switch label=\"Large\" size=\"large\" (selected)=\"propInput.selected($event)\"></ag-switch>\n    <ag-switch label=\"Prechecked\" size=\"large\" [isChecked]=\"true\" (selected)=\"propInput.selected($event)\"></ag-switch>\n    <ag-switch label=\"Disabled\" size=\"large\" [disabled]=\"true\"></ag-switch>\n    <ag-switch label=\"Action\" [isAction]=\"true\" (selected)=\"propInput.selected($event)\"></ag-switch>\n    <ag-switch label=\"Bordered\" [isBordered]=\"true\" (selected)=\"propInput.selected($event)\"></ag-switch>\n    <ag-switch label=\"Bordered Action\" [isAction]=\"true\" [isBordered]=\"true\" (selected)=\"propInput.selected($event)\"></ag-switch>\n    <ag-switch label=\"Right Bordered Action\" labelPosition=\"right\" [isAction]=\"true\" [isBordered]=\"true\" (selected)=\"propInput.selected($event)\"></ag-switch>\n  </div>`\n})"
            },
            {
                "name": "TextArea",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<InputComponent>",
                "defaultValue": "(args: InputComponent) => ({\n  props: {\n    propInput: {\n      changed: actionsData.changed,\n    },\n  },\n  template: `<div>\n    <ag-input\n      uniqueId=\"aginput-${uuid()}\"\n      label=\"Textarea\"\n      placeholder=\"Textarea…\"\n      type=\"textarea\"\n      (changed)=\"propInput.changed($event)\"\n    ></ag-input>\n  </div>`\n})"
            },
            {
                "name": "TextAreaLarge",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<InputComponent>",
                "defaultValue": "(args: InputComponent) => ({\n  props: {\n    propInput: {\n      changed: actionsData.changed,\n    },\n  },\n  template: `<div>\n    <ag-input\n      uniqueId=\"aginput-${uuid()}\"\n      label=\"Textarea large\"\n      placeholder=\"Textarea large…\"\n      type=\"textarea\"\n      size=\"large\"\n      rows=\"10\"\n      cols=\"5\"\n      (changed)=\"propInput.changed($event)\"\n    ></ag-input>\n  </div>`\n})"
            },
            {
                "name": "TextAreaSmall",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<InputComponent>",
                "defaultValue": "(args: InputComponent) => ({\n  props: {\n    propInput: {\n      changed: actionsData.changed,\n    },\n  },\n  template: `<div>\n    <ag-input\n      uniqueId=\"aginput-${uuid()}\"\n      label=\"Textarea amll\"\n      placeholder=\"Textarea small…\"\n      type=\"textarea\"\n      size=\"small\"\n      rows=\"10\"\n      cols=\"5\"\n      (changed)=\"propInput.changed($event)\"\n    ></ag-input>\n  </div>`\n})"
            },
            {
                "name": "Triplets",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/ButtonGroup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Underlined",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<InputComponent>",
                "defaultValue": "(args: InputComponent) => ({\n  props: {\n    propInput: {\n      changed: actionsData.changed,\n    },\n  },\n  template: `<div>\n    <ag-input\n      uniqueId=\"aginput-${uuid()}\"\n      label=\"Underlined input\"\n      placeholder=\"Underlined input…\"\n      [isUnderlined]=\"true\"\n      type=\"text\"\n      (changed)=\"propInput.changed($event)\"\n    ></ag-input>\n  </div>`\n})"
            },
            {
                "name": "UnderlinedWithBackground",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<InputComponent>",
                "defaultValue": "(args: InputComponent) => ({\n  props: {\n    propInput: {\n      changed: actionsData.changed,\n    },\n  },\n  template: `<div>\n    <ag-input\n      uniqueId=\"aginput-${uuid()}\"\n      label=\"Underlined with background\"\n      placeholder=\"Underlined with background…\"\n      size=\"large\"\n      [isUnderlinedWithBackground]=\"true\"\n      type=\"text\"\n      (changed)=\"propInput.changed($event)\"\n    ></ag-input>\n  </div>`\n})"
            },
            {
                "name": "WithCSS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/progress.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "WithProps",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/progress.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "WithTabButtonTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/ag/src/lib/Tabs.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  template: `<ag-tabs>\n    <ng-template #tabButtonTemplate let-tab let-idx=\"index\">\n      <div style=\"{{idx > 0 ? 'margin-left: -1px' : undefined}}\">\n        <ag-button\n          type=\"faux\"\n          [isBordered]=\"true\"\n          mode=\"primary\"\n          role=\"tab\"\n          [attr.aria-selected]=\"tab.isActive\"\n        >\n          {{ tab.title }}\n        </ag-button>\n      </div>\n    </ng-template>\n      <ag-tab-panel title=\"Tab 1\">\n        <p>Custom tab buttons can be achieved by using your own button (which can be AgnosticUI Buttons) using\n        <i>ngTemplateOutlet</i> of <i>#tabButtonTemplate</i> as we have done here.</p>\n        <br />\n        <p>Note, that it's important to pass the <i>type=\"faux\"</i> prop if you use an AgnosticUI Button (or just use\n        a <i>div</i> if you're making your own). Ultimately, we want a <i>div</i> that is styled like a button.\n        This \"tab button div\" will get wrapped internally by <i>ag-tabs</i> with a button of its own. Doing this\n        prevents an a11y violation of nesting focusable elements.</p>\n        <br />\n        <p>You will also want to give these buttons the role of <i>tab</i> and utilize the <i>aria-selected</i>\n        attribute as we've done here (TODO -- link to GitHub source).</p>\n      </ag-tab-panel>\n      <ag-tab-panel title=\"Tab 2\">\n        Tab 2 content\n      </ag-tab-panel>\n    </ag-tabs>\n  `,\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/stories/ag/src/lib/Button.stories.ts": [
                {
                    "name": "actions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  onClicked: action('onClicked')\n}"
                },
                {
                    "name": "BlankButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "BlockButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "BlockPrimaryButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "BlockSecondaryButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Bordered",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "CircleButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "CssPropButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "DisabledButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "FauxTypeButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "NoSkin",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "RaisedButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "RaisedPrimaryButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "ResetButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Rounded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "SubmitButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonComponent>",
                    "defaultValue": "(args: ButtonComponent) => ({\n  props: {\n    propInput: {\n      onClicked: actions.onClicked,\n      type: args.type || 'button',\n      size: args.size || 'medium',\n      css: args.css || undefined,\n      mode: args.mode || undefined,\n      isBordered: args.isBordered || false,\n      isBlock: args.isBlock || false,\n      isBlank: args.isBlank || false,\n      isRaised: args.isRaised|| false,\n      isCircle: args.isCircle || false,\n      // Literally look if false otherwise it's true ¯\\_(ツ)_/¯\n      isSkinned: args.isSkinned === false ? args.isSkinned : true,\n      isRounded: args.isRounded || false,\n      isDisabled: args.isDisabled || false,\n    }\n  },\n  template: `<ag-button\n    [mode]=\"propInput.mode\"\n    [isBlank]=\"propInput.isBlank\"\n    [type]=\"propInput.type\"\n    [size]=\"propInput.size\"\n    [css]=\"propInput.css\"\n    [isBordered]=\"propInput.isBordered\"\n    [isRaised]=\"propInput.isRaised\"\n    [isDisabled]=\"propInput.isDisabled\"\n    [isCircle]=\"propInput.isCircle\"\n    [isBlock]=\"propInput.isBlock\"\n    [isSkinned]=\"propInput.isSkinned\"\n    [isRounded]=\"propInput.isRounded\"\n    (handleClick)=\"propInput.onClicked($event)\"\n  >Go</ag-button>`,\n})"
                }
            ],
            "src/stories/ag/src/lib/ButtonGroup.stories.ts": [
                {
                    "name": "actions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/ButtonGroup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  onClicked: action('onClicked')\n}"
                },
                {
                    "name": "CssAndAria",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/ButtonGroup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/ButtonGroup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonGroupComponent>",
                    "defaultValue": "(args: ButtonGroupComponent) => ({\n  props: {\n    propInput: {\n      css: args.css || undefined,\n      ariaLabel: args.ariaLabel || undefined,\n      onClicked: actions.onClicked,\n    },\n  },\n  template: `<ag-button-group [css]=\"propInput.css\" [ariaLabel]=\"propInput.ariaLabel\">\n    <div class=\"btn-first-wrap\">\n      <ag-button mode=\"primary\" [isBordered]=\"true\" (onClick)=\"propInput.onClicked($event)\">Button 1</ag-button>\n    </div>\n    <ag-button mode=\"primary\" [isBordered]=\"true\" (onClick)=\"propInput.onClicked($event)\">Button 2</ag-button>\n    <ag-button mode=\"primary\" [isBordered]=\"true\" (onClick)=\"propInput.onClicked($event)\">Button 3</ag-button>\n    <div class=\"btn-last-wrap\">\n      <ag-button mode=\"primary\" [isBordered]=\"true\" (onClick)=\"propInput.onClicked($event)\">Button 4</ag-button>\n    </div>\n  </ag-button-group>`,\n})"
                },
                {
                    "name": "Triplets",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/ButtonGroup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/stories/ag/src/lib/ButtonIcon.stories.ts": [
                {
                    "name": "actions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/ButtonIcon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  onClicked: action('onClicked')\n}"
                },
                {
                    "name": "ButtonIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/ButtonIcon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "sampleSvgIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/ButtonIcon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n<svg\n  class=\"btn-icon\"\n  style=\"margin-left: 6px; margin-right: 6px;\"\n  role=\"img\"\n  viewBox=\"0 0 16 16\"\n  version=\"1.1\"\n  width=\"16\"\n  height=\"16\"\n  aria-hidden=\"true\"\n>\n  <desc>Example icon graphic</desc>\n  <path\n    fill=\"currentColor\"\n    fillRule=\"evenodd\"\n    d=\"M9 12h2l-3 3-3-3h2V7h2v5zm3-8c0-.44-.91-3-4.5-3C5.08 1 3 2.92 3 5 1.02\n5 0 6.52 0 8c0 1.53 1 3 3 3h3V9.7H3C1.38 9.7 1.3 8.28 1.3 8c0-.17.05-1.7\n1.7-1.7h1.3V5c0-1.39 1.56-2.7 3.2-2.7 2.55 0 3.13 1.55 3.2 1.8v1.2H12c.81\n0 2.7.22 2.7 2.2 0 2.09-2.25 2.2-2.7 2.2h-2V11h2c2.08 0 4-1.16 4-3.5C16\n5.06 14.08 4 12 4z\"\n  />\n</svg>`"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/ButtonIcon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonComponent>",
                    "defaultValue": "(args: ButtonComponent) => ({\n  props: {\n    propInput: {\n      onClicked: actions.onClicked\n    },\n  },\n  template: `<div>\n    <ag-button [mode]=\"primary\" (onClick)=\"propInput.onClicked($event)\">\n    ${sampleSvgIcon} \n    Icon Left</ag-button>\n  </div>\n  <div style=\"margin-top: 32px;\">\n    <ag-button [mode]=\"primary\" (onClick)=\"propInput.onClicked($event)\">\n      Icon Right \n      ${sampleSvgIcon} \n    </ag-button>\n  </div>`,\n})"
                }
            ],
            "src/stories/ag/src/lib/Input.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  changed: action('changed'),\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<InputComponent>",
                    "defaultValue": "(args: InputComponent) => ({\n  props: {\n    propInput: {\n      changed: actionsData.changed,\n    },\n  },\n  template: `<div>\n    <ag-input\n      uniqueId=\"aginput-${uuid()}\"\n      placeholder=\"Enter name…\"\n      label=\"Default input\"\n      type=\"text\"\n      (changed)=\"propInput.changed($event)\"\n    ></ag-input>`\n})"
                },
                {
                    "name": "HelpText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<InputComponent>",
                    "defaultValue": "(args: InputComponent) => ({\n  props: {\n    propInput: {\n      changed: actionsData.changed,\n    },\n  },\n  template: `<div>\n    <ag-input\n      uniqueId=\"aginput-${uuid()}\"\n      label=\"Help text\"\n      placeholder=\"Help text…\"\n      type=\"text\"\n      helpText=\"Some useful help text.\"\n      (changed)=\"propInput.changed($event)\"\n    ></ag-input>\n  </div>`\n})"
                },
                {
                    "name": "Inline",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<InputComponent>",
                    "defaultValue": "(args: InputComponent) => ({\n  props: {\n    propInput: {\n      changed: actionsData.changed,\n    },\n  },\n  template: `<div>\n    <ag-input\n      uniqueId=\"aginput-${uuid()}\"\n      label=\"Inline input\"\n      placeholder=\"Inline input…\"\n      [isInline]=\"true\"\n      type=\"text\"\n      (changed)=\"propInput.changed($event)\"\n    ></ag-input>\n  </div>`\n})"
                },
                {
                    "name": "InputAddons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<InputComponent>",
                    "defaultValue": "(args: InputComponent) => ({\n  props: {\n    propInput: {\n      changed: actionsData.changed,\n    },\n  },\n  \n  // Note: we need to use Angular selectors and classes of the same name for the addons\n  // that are projected like follows:\n  // <div addOnLeft class=\"addOnLeft\"><span>L</span></div>\n  // <div addOnRight class=\"addOnRight\"><span>R</span></div>\n  template: `<div>\n    <h1>Input with addons</h1>\n    <ag-input\n      uniqueId=\"aginput-${uuid()}\"\n      hasLeftAddon=\"true\"\n      hasRightAddon=\"true\"\n      label=\"Input with addons\"\n      type=\"text\"\n      (changed)=\"propInput.changed($event)\"\n    >\n      <div addOnLeft class=\"addOnLeft\"><span>L</span></div>\n      <div addOnRight class=\"addOnRight\"><span>R</span></div>\n    </ag-input>\n  </div>`\n})"
                },
                {
                    "name": "InvalidLargeText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<InputComponent>",
                    "defaultValue": "(args: InputComponent) => ({\n  props: {\n    propInput: {\n      changed: actionsData.changed,\n    },\n  },\n  template: `<div>\n    <ag-input\n      uniqueId=\"aginput-${uuid()}\"\n      label=\"Invalid text large\"\n      placeholder=\"Invalid text…\"\n      type=\"text\"\n      size=\"large\"\n      invalidText=\"This field has errors.\"\n      [isInvalid]=\"true\"\n      (changed)=\"propInput.changed($event)\"\n    ></ag-input>\n  </div>`\n})"
                },
                {
                    "name": "InvalidSmallText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<InputComponent>",
                    "defaultValue": "(args: InputComponent) => ({\n  props: {\n    propInput: {\n      changed: actionsData.changed,\n    },\n  },\n  template: `<div>\n    <ag-input\n      uniqueId=\"aginput-${uuid()}\"\n      label=\"Invalid text small\"\n      placeholder=\"Invalid text small…\"\n      type=\"text\"\n      invalidText=\"This field has errors.\"\n      [isInvalid]=\"true\"\n      (changed)=\"propInput.changed($event)\"\n    ></ag-input>\n  </div>`\n})"
                },
                {
                    "name": "InvalidText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<InputComponent>",
                    "defaultValue": "(args: InputComponent) => ({\n  props: {\n    propInput: {\n      changed: actionsData.changed,\n    },\n  },\n  template: `<div>\n    <ag-input\n      uniqueId=\"aginput-${uuid()}\"\n      label=\"Invalid text\"\n      placeholder=\"Invalid text…\"\n      type=\"text\"\n      invalidText=\"This field has errors.\"\n      [isInvalid]=\"true\"\n      (changed)=\"propInput.changed($event)\"\n    ></ag-input>\n  </div>`\n})"
                },
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<InputComponent>",
                    "defaultValue": "(args: InputComponent) => ({\n  props: {\n    propInput: {\n      changed: actionsData.changed,\n    },\n  },\n  template: `<div>\n    <ag-input\n      uniqueId=\"aginput-${uuid()}\"\n      label=\"Large input\"\n      placeholder=\"Large input…\"\n      size=\"large\"\n      [isRounded]=\"true\"\n      type=\"text\"\n      (changed)=\"propInput.changed($event)\"\n    ></ag-input>\n  </div>`\n})"
                },
                {
                    "name": "Rounded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<InputComponent>",
                    "defaultValue": "(args: InputComponent) => ({\n  props: {\n    propInput: {\n      changed: actionsData.changed,\n    },\n  },\n  template: `<div>\n    <ag-input\n      uniqueId=\"aginput-${uuid()}\"\n      label=\"Rounded input\"\n      placeholder=\"Rounded input…\"\n      [isRounded]=\"true\"\n      type=\"text\"\n      (changed)=\"propInput.changed($event)\"\n    ></ag-input>\n  </div>`\n})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<InputComponent>",
                    "defaultValue": "(args: InputComponent) => ({\n  props: {\n    propInput: {\n      changed: actionsData.changed,\n    },\n  },\n  template: `<div>\n    <ag-input\n      uniqueId=\"aginput-${uuid()}\"\n      label=\"Small input\"\n      placeholder=\"Small input…\"\n      size=\"small\"\n      [isRounded]=\"true\"\n      type=\"text\"\n      (changed)=\"propInput.changed($event)\"\n    ></ag-input>\n  </div>`\n})"
                },
                {
                    "name": "TextArea",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<InputComponent>",
                    "defaultValue": "(args: InputComponent) => ({\n  props: {\n    propInput: {\n      changed: actionsData.changed,\n    },\n  },\n  template: `<div>\n    <ag-input\n      uniqueId=\"aginput-${uuid()}\"\n      label=\"Textarea\"\n      placeholder=\"Textarea…\"\n      type=\"textarea\"\n      (changed)=\"propInput.changed($event)\"\n    ></ag-input>\n  </div>`\n})"
                },
                {
                    "name": "TextAreaLarge",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<InputComponent>",
                    "defaultValue": "(args: InputComponent) => ({\n  props: {\n    propInput: {\n      changed: actionsData.changed,\n    },\n  },\n  template: `<div>\n    <ag-input\n      uniqueId=\"aginput-${uuid()}\"\n      label=\"Textarea large\"\n      placeholder=\"Textarea large…\"\n      type=\"textarea\"\n      size=\"large\"\n      rows=\"10\"\n      cols=\"5\"\n      (changed)=\"propInput.changed($event)\"\n    ></ag-input>\n  </div>`\n})"
                },
                {
                    "name": "TextAreaSmall",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<InputComponent>",
                    "defaultValue": "(args: InputComponent) => ({\n  props: {\n    propInput: {\n      changed: actionsData.changed,\n    },\n  },\n  template: `<div>\n    <ag-input\n      uniqueId=\"aginput-${uuid()}\"\n      label=\"Textarea amll\"\n      placeholder=\"Textarea small…\"\n      type=\"textarea\"\n      size=\"small\"\n      rows=\"10\"\n      cols=\"5\"\n      (changed)=\"propInput.changed($event)\"\n    ></ag-input>\n  </div>`\n})"
                },
                {
                    "name": "Underlined",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<InputComponent>",
                    "defaultValue": "(args: InputComponent) => ({\n  props: {\n    propInput: {\n      changed: actionsData.changed,\n    },\n  },\n  template: `<div>\n    <ag-input\n      uniqueId=\"aginput-${uuid()}\"\n      label=\"Underlined input\"\n      placeholder=\"Underlined input…\"\n      [isUnderlined]=\"true\"\n      type=\"text\"\n      (changed)=\"propInput.changed($event)\"\n    ></ag-input>\n  </div>`\n})"
                },
                {
                    "name": "UnderlinedWithBackground",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<InputComponent>",
                    "defaultValue": "(args: InputComponent) => ({\n  props: {\n    propInput: {\n      changed: actionsData.changed,\n    },\n  },\n  template: `<div>\n    <ag-input\n      uniqueId=\"aginput-${uuid()}\"\n      label=\"Underlined with background\"\n      placeholder=\"Underlined with background…\"\n      size=\"large\"\n      [isUnderlinedWithBackground]=\"true\"\n      type=\"text\"\n      (changed)=\"propInput.changed($event)\"\n    ></ag-input>\n  </div>`\n})"
                }
            ],
            "src/stories/ag/src/lib/choice-input.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/choice-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  selected: action('selected'),\n}"
                },
                {
                    "name": "All",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/choice-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ChoiceInputComponent>",
                    "defaultValue": "(args: ChoiceInputComponent) => ({\n  props: {\n    propInput: {\n      selected: actionsData.selected,\n    },\n    disabledOptions: ['weekly', 'monthly'],\n    reusableOptions: [\n      {\n        name: 'frequency',\n        value: 'daily',\n        label: 'Daily',\n      },\n      {\n        name: 'frequency',\n        value: 'weekly',\n        label: 'Weekly',\n      },\n      {\n        name: 'frequency',\n        value: 'monthly',\n        label: 'Monthly',\n      },\n    ]\n  },\n  template: `<div>\n    <h1 style=\"margin: 1rem 0;\">Checkboxes</h1>\n    <ag-choice-input type=\"checkbox\" [options]=\"reusableOptions\" legendLabel=\"Legend\" (selected)=\"propInput.selected($event)\"></ag-choice-input>\n    <ag-choice-input type=\"checkbox\" [isDisabled]=\"true\" [options]=\"reusableOptions\" legendLabel=\"Disabled\" (selected)=\"propInput.selected($event)\"></ag-choice-input>\n    <ag-choice-input type=\"checkbox\" [options]=\"reusableOptions\" [disabledOptions]=\"disabledOptions\" legendLabel=\"Specific options disabled\" (selected)=\"propInput.selected($event)\"></ag-choice-input>\n    <ag-choice-input type=\"checkbox\" [options]=\"reusableOptions\" [disabledOptions]=\"disabledOptions\" [isFieldset]=\"false\" legendLabel=\"Fieldset hidden\" (selected)=\"propInput.selected($event)\"></ag-choice-input>\n    <ag-choice-input type=\"checkbox\" [options]=\"reusableOptions\" [isInline]=\"true\" legendLabel=\"Inline\" (selected)=\"propInput.selected($event)\"></ag-choice-input>\n    <ag-choice-input type=\"checkbox\" [options]=\"reusableOptions\" [isInline]=\"true\" size=\"small\" legendLabel=\"Small\" (selected)=\"propInput.selected($event)\"></ag-choice-input>\n    <ag-choice-input type=\"checkbox\" [options]=\"reusableOptions\" [isInline]=\"true\" size=\"large\" legendLabel=\"Large\" (selected)=\"propInput.selected($event)\"></ag-choice-input>\n    <ag-choice-input type=\"checkbox\" [options]=\"reusableOptions\" checkedOptions=\"['daily', 'weekly']\" [isInline]=\"true\" size=\"large\" legendLabel=\"Prechecked options\" (selected)=\"propInput.selected($event)\"></ag-choice-input>\n    <h1 style=\"margin: 1rem 0;\">Radios</h1>\n    <ag-choice-input type=\"radio\" [options]=\"reusableOptions\" legendLabel=\"Radio legend\" (selected)=\"propInput.selected($event)\"></ag-choice-input>\n    <ag-choice-input type=\"radio\" [options]=\"reusableOptions\" [isDisabled]=\"true\" legendLabel=\"Disabled\" (selected)=\"propInput.selected($event)\"></ag-choice-input>\n    <ag-choice-input type=\"radio\" [options]=\"[{ name: 'numbers', value: 'one', label: 'one'}, { name: 'numbers', value: 'two', label: 'two' }, { name: 'numbers', value: 'three', label: 'three' }]\"\n      [disabledOptions]=\"['two']\" legendLabel=\"Specific options disabled\" (selected)=\"propInput.selected($event)\"></ag-choice-input>\n    <ag-choice-input type=\"radio\" [options]=\"[{ name: 'es', value: 'uno', label: 'uno'}, { name: 'es', value: 'dos', label: 'dos' }, { name: 'es', value: 'tres', label: 'tres' }]\"\n      legendLabel=\"Fieldset hidden\" [isFieldset]=\"false\" (selected)=\"propInput.selected($event)\"></ag-choice-input>\n    <ag-choice-input type=\"radio\" [options]=\"[{ name: 'colors', value: 'blue', label: 'Blue'}, { name: 'colors', value: 'red', label: 'Red' }, { name: 'colors', value: 'silver', label: 'Silver' }]\"\n      legendLabel=\"Inline\" [isInline]=\"true\" (selected)=\"propInput.selected($event)\"></ag-choice-input>\n    <ag-choice-input type=\"radio\" [options]=\"[{ name: 'bands', value: 'bonjovi', label: 'Bon Jovi'}, { name: 'bands', value: 'stones', label: 'Rolling Stones' }, { name: 'bands', value: 'isleybros', label: 'Isley Brothers' }]\"\n      legendLabel=\"Large\" size=\"large\" [isInline]=\"true\" (selected)=\"propInput.selected($event)\"></ag-choice-input>\n\n    <ag-choice-input type=\"radio\" [options]=\"[{ name: 'solo', value: 'stevie', label: 'Stevie Wonder'}, { name: 'solo', value: 'whitney', label: 'Whitney Houston' }, { name: 'solo', value: 'charlie', label: 'Charlie Wilson' }]\"\n      [checkedOptions]=\"['charlie']\" legendLabel=\"Prechecked option\" size=\"large\" [isInline]=\"true\" (selected)=\"propInput.selected($event)\"></ag-choice-input>\n  </div>` \n})"
                }
            ],
            "src/stories/ag/src/lib/switch.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/switch.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  selected: action('selected'),\n}"
                },
                {
                    "name": "SwitchExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/switch.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/switch.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SwitchComponent>",
                    "defaultValue": "(args: SwitchComponent) => ({\n  props: {\n    propInput: {\n      selected: actionsData.selected,\n    }\n  },\n  template: `<div>\n    <ag-switch label=\"Small\" size=\"small\" labelPosition=\"right\" (selected)=\"propInput.selected($event)\"></ag-switch>\n    <ag-switch label=\"Switch default\" (selected)=\"propInput.selected($event)\"></ag-switch>\n    <ag-switch label=\"Large\" size=\"large\" (selected)=\"propInput.selected($event)\"></ag-switch>\n    <ag-switch label=\"Prechecked\" size=\"large\" [isChecked]=\"true\" (selected)=\"propInput.selected($event)\"></ag-switch>\n    <ag-switch label=\"Disabled\" size=\"large\" [disabled]=\"true\"></ag-switch>\n    <ag-switch label=\"Action\" [isAction]=\"true\" (selected)=\"propInput.selected($event)\"></ag-switch>\n    <ag-switch label=\"Bordered\" [isBordered]=\"true\" (selected)=\"propInput.selected($event)\"></ag-switch>\n    <ag-switch label=\"Bordered Action\" [isAction]=\"true\" [isBordered]=\"true\" (selected)=\"propInput.selected($event)\"></ag-switch>\n    <ag-switch label=\"Right Bordered Action\" labelPosition=\"right\" [isAction]=\"true\" [isBordered]=\"true\" (selected)=\"propInput.selected($event)\"></ag-switch>\n  </div>`\n})"
                }
            ],
            "src/stories/ag/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/stories/ag/src/lib/Tabs.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Tabs.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  template: `<ag-tabs>\n      <ag-tab-panel title=\"Tab 1\">\n        Tab 1 content\n      </ag-tab-panel>\n      <ag-tab-panel title=\"Tab 2\">\n        Tab 2 content\n      </ag-tab-panel>\n    </ag-tabs>\n  `,\n})"
                },
                {
                    "name": "Jumbo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Tabs.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  template: `<ag-tabs size=\"jumbo\">\n      <ag-tab-panel title=\"Tab 1\">\n        Tab 1 content\n      </ag-tab-panel>\n      <ag-tab-panel title=\"Tab 2\">\n        Tab 2 content\n      </ag-tab-panel>\n    </ag-tabs>\n  `,\n})"
                },
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Tabs.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  template: `<ag-tabs size=\"large\">\n      <ag-tab-panel title=\"Tab 1\">\n        Tab 1 content\n      </ag-tab-panel>\n      <ag-tab-panel title=\"Tab 2\">\n        Tab 2 content\n      </ag-tab-panel>\n    </ag-tabs>\n  `,\n})"
                },
                {
                    "name": "WithTabButtonTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Tabs.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  template: `<ag-tabs>\n    <ng-template #tabButtonTemplate let-tab let-idx=\"index\">\n      <div style=\"{{idx > 0 ? 'margin-left: -1px' : undefined}}\">\n        <ag-button\n          type=\"faux\"\n          [isBordered]=\"true\"\n          mode=\"primary\"\n          role=\"tab\"\n          [attr.aria-selected]=\"tab.isActive\"\n        >\n          {{ tab.title }}\n        </ag-button>\n      </div>\n    </ng-template>\n      <ag-tab-panel title=\"Tab 1\">\n        <p>Custom tab buttons can be achieved by using your own button (which can be AgnosticUI Buttons) using\n        <i>ngTemplateOutlet</i> of <i>#tabButtonTemplate</i> as we have done here.</p>\n        <br />\n        <p>Note, that it's important to pass the <i>type=\"faux\"</i> prop if you use an AgnosticUI Button (or just use\n        a <i>div</i> if you're making your own). Ultimately, we want a <i>div</i> that is styled like a button.\n        This \"tab button div\" will get wrapped internally by <i>ag-tabs</i> with a button of its own. Doing this\n        prevents an a11y violation of nesting focusable elements.</p>\n        <br />\n        <p>You will also want to give these buttons the role of <i>tab</i> and utilize the <i>aria-selected</i>\n        attribute as we've done here (TODO -- link to GitHub source).</p>\n      </ag-tab-panel>\n      <ag-tab-panel title=\"Tab 2\">\n        Tab 2 content\n      </ag-tab-panel>\n    </ag-tabs>\n  `,\n})"
                }
            ],
            "src/stories/ag/src/lib/progress.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/progress.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/progress.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ProgressComponent>",
                    "defaultValue": "(args: ProgressComponent) => ({\n  props: args,\n})"
                },
                {
                    "name": "WithCSS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/progress.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "WithProps",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/progress.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/stories/ag/src/lib/Header.stories.ts": [
                {
                    "name": "HeaderExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<HeaderComponent>",
                    "defaultValue": "(args: HeaderComponent) => ({\n  template: `<ag-header isSticky=\"true\">\n    <ag-header-nav>\n      <ag-header-nav-item style=\"margin-right: 8px;\">\n        <a style=\"color: '#333333'; textDecoration: 'none';\" href=\"#\">\n          Home\n        </a>\n      </ag-header-nav-item>\n      <ag-header-nav-item>\n        <a style=\"color: '#333333'; textDecoration: 'none';\" href=\"#\">\n          Services\n        </a>\n      </ag-header-nav-item>\n    </ag-header-nav>\n  </ag-header>`\n})"
                }
            ],
            "src/stories/ag/src/lib/Card.stories.ts": [
                {
                    "name": "TabsAll",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/ag/src/lib/Card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CardComponent>",
                    "defaultValue": "(args: CardComponent) => ({\n  template: `\n    <ag-card>\n      <div style=\"padding: 24px;\">Default</div>\n      <div style=\"padding: 24px;\">Card</div>\n    </ag-card>\n    <ag-card isStacked=\"true\">\n      <div style=\"padding: 24px;\">Stacked</div>\n      <div style=\"padding: 24px;\">Card</div>\n    </ag-card>\n    <ag-card isStacked=\"true\" isAnimated=\"true\">\n      <div style=\"padding: 24px;\">Stacked & Animated</div>\n      <div style=\"padding: 24px;\">Card</div>\n    </ag-card>\n    <ag-card isSkinned=\"false\">\n      <div style=\"padding: 24px;\">Base Card</div>\n      <div style=\"padding: 24px;\">No Skin</div>\n    </ag-card>\n    <ag-card css=\"addition-classes\">\n      <div style=\"padding: 24px;\">Custom CSS Class Overrides</div>\n      <div style=\"padding: 24px;\">Inspect to see additional-classes</div>\n    </ag-card>\n  `,\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/stories/ag/src/lib/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BlankButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BlockButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BlockPrimaryButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BlockSecondaryButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Bordered",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CircleButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CssPropButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DisabledButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FauxTypeButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NoSkin",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RaisedButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RaisedPrimaryButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ResetButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Rounded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SubmitButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/ButtonGroup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/ButtonGroup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CssAndAria",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/ButtonGroup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/ButtonGroup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Triplets",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/ButtonIcon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/ButtonIcon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ButtonIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/ButtonIcon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sampleSvgIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/ButtonIcon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TabsAll",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HeaderExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HelpText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Inline",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InputAddons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InvalidLargeText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InvalidSmallText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InvalidText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Rounded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextArea",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextAreaLarge",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextAreaSmall",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Underlined",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UnderlinedWithBackground",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Tabs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Tabs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Jumbo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Tabs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/Tabs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithTabButtonTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/buttongroup.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/choice-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChoiceInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/choice-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/choice-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "All",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderNavComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderNavItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/29",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/progress.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProgressComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/progress.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/progress.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/progress.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithCSS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/progress.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithProps",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/svg.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SvgComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/switch.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SwitchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/switch.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/switch.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SwitchExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/switch.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/tab-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/lib/tabs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabsComponent",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/ag/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}