---
// The ordering here matters because these all have minimal specificity
// and rely on top down specificity between base, core, empty, and group!
import 'agnostic-css/src/components/button/button-base.css';
import 'agnostic-css/src/components/button/button-core.css';
import 'agnostic-css/src/components/button/button-empty.css';
import 'agnostic-css/src/components/button/button-group.css';

import XElement from 'astro-xelement'
const { button: AgButton } = XElement;

const throwError = (message: string) => {
  throw new Error(message);
}

const {mode, size, isGrouped, isCircle, isRounded, isBordered, isBlock, isCapsule, isLink, isBlank, ...attrs} = Astro.props


let classes = Object.keys(attrs).find((item) => /^class$/i.test(item));
let additionalClassList = [];
if (classes) {
  let classList = attrs['class'];
  delete attrs['class'];
  classList = typeof classList === 'string' ? classList.split(' ') : throwError('Incorrect values passed for class list.')
  additionalClassList = classList;
}

---

<AgButton
  class:list={[
    'btn',
    {
      'btn-primary': mode == 'primary' ? true : false,
      'btn-secondary': mode == 'secondary' ? true : false,
      'btn-rounded': isRounded ? true : false,
      'btn-bordered': isBordered ? true : false,
      'btn-block': isBlock ? true : false,
      'btn-link': isLink ? true : false,
      'btn-blank': isBlank ? true : false,
      'btn-capsule': isCapsule ? true : false,
      'btn-small': size && size === 'small' ? true : false,
      'btn-large': size && size === 'large' ? true : false,
      'btn-circle': isCircle ? true : false,
      'btn-grouped': isGrouped ? true : false,
    },
    additionalClassList,
  ]}
  {...attrs}
>
    <slot />
</AgButton>
