---
import { Code } from 'astro/components';
import XElement from 'astro-xelement'

import AgTabs from '../../lib/components/Tabs.astro'
import AgTabPanel from '../../lib/components/TabPanel.astro'
import AgTabButton from '../../lib/components/TabButton.astro'

import BaseLayout from '../../layouts/BaseLayout.astro';

const { HContainer} = XElement;
---
  <BaseLayout>
    <div class="h3 mbs40">Tabs</div>
    <HContainer class="container">
      <p class="mbs24 mbe24">The <a href="https://github.com/agnosticui/agnosticui/agnostic-astro" target="_blank">agnostic-astro</a>
      package utilizes <a href="https://github.com/astro-community/xelement" target="_blank">XElement</a> under-the-hood in order to provide build-time
      <a href="https://docs.astro.build/en/core-concepts/astro-components/" target="_blank">Astro components</a>. These build-time components will help
      your project get closer to realizing a mostly <span class="quoted">no client-side runtime</span>…if you do it right, this should mean an all-green 100% Lighthouse performance score!
      Leverage the benefits of <a href="https://docs.astro.build/en/core-concepts/partial-hydration/#island-architecture" target="_blank">Islands architecture</a>
      by sending mostly server built <a href="https://github.com/agnosticui/agnosticui/agnostic-astro" target="_blank">agnostic-astro</a> components. Then,
      sprinkle client-hydrated ones only as needed.</p>
      <div class="h4 mbe24">Usage</div>
      <p class="mbe12">Ensure you've installed and setup the <a href="https://github.com/AgnosticUI/agnosticui/tree/master/integrations/astro/agnostic-astro" target="_blank">AgnosticUI Astro integration</a>
      which will import the required <code>common.min.css</code> onto your page:
      <Code code={`npm i astro-agnosticui`} lang="bash" wrap />
      </p>
      <p class="mbs24 mbe12">Then add the integration to your <code>astro.config.mjs</code> (you may need to run Astro with experimental integrations flag <code>astro dev --experimental-integrations</code>):
        <Code code={`import { defineConfig } from 'astro/config';
import agnosticAstro from 'astro-agnosticui';;
export default defineConfig({
  integrations: [agnosticAstro()]
});`} lang="javascript" wrap />
      </p>
      <p class="mbs24 mbe12">Then you can import Astro Tabs component (<code>agnostic-astro</code> ships with the <code>astro-agnosticui</code> integration):
      <Code code={`import AgTabs from '../../lib/components/Tabs.astro';
import AgTabPanel from '../../lib/components/TabPanel.astro';
import AgTabButton from '../../lib/components/TabButton.astro';`} lang="javascript" wrap />
      </p>
      <p class="mbs24 mbe12">Here's the <a href="https://github.com/AgnosticUI/agnosticui/tree/master/agnostic-astro" target="_blank">agnostic-astro</a> Tabs component in use:</p>
      <Code code={`<tbd>tbd—coming soon ;-)</tbd>`} lang="html" wrap />
      <div class="mbe24" />
      <AgTabs>
        <Fragment slot="buttons">
          <!--  The id will be used in corresponding panel's aria-labelledby, while the 
          controlsPanelId will be used in aria-controls -->
          <AgTabButton id="button1" controlsPanelId="panel1">Tab Button 1</AgTabButton>
          <AgTabButton id="button2" controlsPanelId="panel2">Tab Button 2</AgTabButton>
          <AgTabButton id="button3" controlsPanelId="panel3">Tab Button 3</AgTabButton>
          <AgTabButton id="button4" controlsPanelId="panel4">Tab Button 4</AgTabButton>
        </Fragment>
        <Fragment slot="panels">
          <AgTabPanel id="panel1">
            <p>Tab 1 content (no padding or margins so consumer can control desired gutters). Here's an
            <a href="www.yahoo.com" target="_blank">yahoo</a> link, and a <a href="www.github.com" target="_blank">github</a> link to
            test keybaord navigation.</p>
          </AgTabPanel>
          <AgTabPanel id="panel2">
            <p>Tab 2 content (no padding or margins so consumer can control desired gutters)</p>
          </AgTabPanel>
          <AgTabPanel id="panel3">
            <p>Tab 3 content</p>
          </AgTabPanel>
          <AgTabPanel id="panel4">
            <p>Tab 4 content</p>
          </AgTabPanel>
        </Fragment>
      </AgTabs>
    </HContainer>
  </BaseLayout>
  