---
import { Code } from 'astro/components';
// We can use this too but will need to go grab a CSS theme
// import { Prism } from '@astrojs/prism';

import XElement from 'astro-xelement'

import AgIcon from '../../lib/components/Icon.astro'
import AgInput from '../../lib/components/Input.astro'

import BaseLayout from '../../layouts/BaseLayout.astro';

const { HContainer} = XElement;

---
<svg aria-hidden="true"
     style="position: absolute; width: 0; height: 0; overflow: hidden"
     version="1.1"
     xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink">
  <defs>
    <symbol id="icon-cross2"
            viewBox="0 0 16 16">
      <path
            d="M13.957 3.457l-1.414-1.414-4.543 4.543-4.543-4.543-1.414 1.414 4.543 4.543-4.543 4.543 1.414 1.414 4.543-4.543 4.543 4.543 1.414-1.414-4.543-4.543z">
      </path>
    </symbol>
    <symbol id="icon-checkmark3"
            viewBox="0 0 16 16">
      <path d="M14 2.5l-8.5 8.5-3.5-3.5-1.5 1.5 5 5 10-10z"></path>
    </symbol>
  </defs>
</svg>
  <BaseLayout>
    <div class="h3 mbs40">Inputs</div>
    <HContainer class="container">
      <p class="mbs24 mbe24">The <a href="https://github.com/agnosticui/agnosticui/agnostic-astro" target="_blank">agnostic-astro</a>
      package utilizes <a href="https://github.com/astro-community/xelement" target="_blank">XElement</a> under-the-hood in order to provide build-time
      <a href="https://docs.astro.build/en/core-concepts/astro-components/" target="_blank">Astro components</a>. These build-time components will help
      your project get closer to realizing a mostly <span class="quoted">no client-side runtime</span>â€¦if you do it right, this should mean an all-green 100% Lighthouse performance score!
      Leverage the benefits of <a href="https://docs.astro.build/en/core-concepts/partial-hydration/#island-architecture" target="_blank">Islands architecture</a>
      by sending mostly server built <a href="https://github.com/agnosticui/agnosticui/agnostic-astro" target="_blank">agnostic-astro</a> components. Then,
      sprinkle client-hydrated ones only as needed.</p>

      <div class="h4 mbe24">Usage</div>
      <p class="mbe12">Ensure you've installed the <code>agnostic-astro</code> npm package
        (note this installs depedency <code>agnostic-css</code> as well):
        <Code code={`npm i agnostic-astro`} lang="bash" wrap />
      </p>
      <p class="mbs18 mbe12">and then import <code>common.min.css</code> from your &ldquo;base layout&rdquo; (you should only need to do this in once place as this is global CSS). This brings in
      the required CSS custom properties, reset, and properties:
        <Code code={`import 'agnostic-css/public/css-dist/common.min.css';`} lang="javascript" wrap />
      </p>
      <p class="mbs24 mbe12">Then you can import Astro Input component:
      <Code code={`import AgInput from 'agnostic-astro/Input.astro';`} lang="javascript" wrap />
      </p>
      <p class="mbs24 mbe12">Here's the <a href="https://github.com/AgnosticUI/agnosticui/tree/master/agnostic-astro" target="_blank">agnostic-astro</a> Input component in use:</p>
<Code code={`<form>
  <AgInput class="mbe24" label="Input label" uniqueId="input-default" placeholder="Enter some textâ€¦" />
  <AgInput class="mbe24" label="Input rounded label" uniqueId="input-rounded" isRounded placeholder="Enter some textâ€¦" />
  <AgInput class="mbe24" label="Input readonly" uniqueId="input-readonly" readonly isRounded placeholder="Enter some textâ€¦" />
  <AgInput class="mbe24" label="Input disabled" uniqueId="input-disabled" disabled isRounded placeholder="Enter some textâ€¦" />
  <AgInput class="mbe24" label="Input small" size="small" uniqueId="input-small" placeholder="Enter some textâ€¦" />
  <AgInput class="mbe24" label="Input large" size="large" uniqueId="input-large" placeholder="Enter some textâ€¦" />
  <AgInput class="mbe24" label="Input underlined" isUnderlined uniqueId="input-underlined" placeholder="Enter some textâ€¦" />
  <AgInput class="mbe24" label="Input underlined w/background" isUnderlined isUnderlinedBackground uniqueId="input-underlined-bg" placeholder="Enter some textâ€¦" />
  <AgInput class="mbe24" label="Input underlined w/background large" isUnderlined isUnderlinedBackground size="large" uniqueId="input-underlined-bg-large" placeholder="Enter some textâ€¦" />
  <div class="mbs8" />
  <AgInput class="mie16" label="Input inline" isInlined uniqueId="input-inlined" placeholder="Enter some textâ€¦" />
  <AgInput class="mie16" label="Input inline and underlined" isInlined isUnderlined uniqueId="input-inlined-underlined" placeholder="Enter some textâ€¦" />
  <div class="mbs24" />
  <AgInput hasLeftAddon hasRightAddon label="Input with addon" uniqueId="input-addons" placeholder="Enter some textâ€¦" >
    <div slot="addon-left" class="input-addon-left">
      <AgIcon type="success" size="18">
        <svg>
          <use xlink:href="#icon-checkmark3"></use>
        </svg> 
      </AgIcon>
    </div>
    <div slot="addon-right" class="input-addon-right">
      <AgIcon type="error" size="18">
        <svg>
          <use xlink:href="#icon-cross2"></use>
        </svg> 
      </AgIcon>
    </div>
  </AgInput>
</form>
<script>
  // There are many ways to listen for input events; this is just one
  // pedantic way built atop of good ole' platform JavaScript ;-)
  const inputElement = document.getElementById('inputTest');
  inputElement.addEventListener('input', (event) => {
    const value = event.target.value;
    if (value) {
      inputResult.textContent = value;
    } else {
      // They may have cleared out the text so reset
      inputResult.textContent = 'Type in the input below: ';
    }
  });
</script>
`} lang="html" wrap />
      <div class="mbe24" />
      <form>
        <AgInput
          class="mbe24"
          label="Input label"
          uniqueId="input-default"
          placeholder="Enter some textâ€¦"
        />
        <AgInput
          class="mbe24"
          label="Input rounded label"
          uniqueId="input-rounded"
          isRounded
          placeholder="Enter some textâ€¦"
        />
        <AgInput
          class="mbe24"
          label="Input readonly"
          uniqueId="input-readonly"
          readonly
          isRounded
          placeholder="Enter some textâ€¦"
        />
        <AgInput
          class="mbe24"
          label="This label will be hidden from sighted users but available to screenreaders"
          uniqueId="input-label-hidden-but-not-from-screenreaders"
          placeholder="Input with label hidden (but not from screenreaders)"
          isLabelHidden
        />
        <AgInput
          class="mbe24"
          label="Input disabled"
          uniqueId="input-disabled"
          disabled
          isRounded
          placeholder="Enter some textâ€¦"
        />
        <AgInput
          class="mbe24"
          label="Input small"
          size="small"
          uniqueId="input-small"
          placeholder="Enter some textâ€¦"
        />
        <AgInput
          class="mbe24"
          label="Input large"
          size="large"
          uniqueId="input-large"
          placeholder="Enter some textâ€¦"
        />
        <AgInput
          class="mbe24"
          label="Input underlined"
          isUnderlined
          uniqueId="input-underlined"
          placeholder="Enter some textâ€¦"
        />
        <AgInput
          class="mbe24"
          label="Input underlined w/background"
          isUnderlined
          isUnderlinedBackground
          uniqueId="input-underlined-bg"
          placeholder="Enter some textâ€¦"
        />
        <AgInput
          class="mbe24"
          label="Input underlined w/background large"
          isUnderlined
          isUnderlinedBackground
          size="large"
          uniqueId="input-underlined-bg-large"
          placeholder="Enter some textâ€¦"
        />
        <div class="mbs8" />
        <AgInput
          class="mie16"
          label="Input inline"
          isInlined
          uniqueId="input-inlined"
          placeholder="Enter some textâ€¦"
        />
        <AgInput
          class="mie16"
          label="Input inline and underlined"
          isInlined
          isUnderlined
          uniqueId="input-inlined-underlined"
          placeholder="Enter some textâ€¦"
        />
        <div class="mbs24" />
        <AgInput
          hasLeftAddon
          hasRightAddon
          label="Input with addon"
          uniqueId="input-addons"
          placeholder="Enter some textâ€¦"
        >
          <div slot="addon-left" class="input-addon-left">
            <AgIcon type="success" size="18">
              <svg>
                <use xlink:href="#icon-checkmark3"></use>
              </svg> 
            </AgIcon>
          </div>
          <div slot="addon-right" class="input-addon-right">
            <AgIcon type="error" size="18">
              <svg>
                <use xlink:href="#icon-cross2"></use>
              </svg> 
            </AgIcon>
          </div>
        </AgInput>
        <div class="mbs32 h4">Input Event Test</div>
        <div id="inputResult" class="mbs24 mbe24">Type in input below to see input events take me over ðŸ˜Ž</div>
        <AgInput uniqueId="inputTest" label="Input event test" placeholder="This input tests input events" />
      </form>
      <div class="mbs24 h3 mbe24">HTML5 Input Types</div>
      <p>
        HTML5 provides a plethora of input types. AgnosticUI generally takes a minimalistic and
        backseat approach to these various types. Generally, input types that somehow seem similar
        to a text input like email, password, search, etc., will at least share the text input's
        general appearance in terms of height, spacing, font size, etc., if you've added AgnosticUI
        classes to it. But, we attempt to be as unobtrusive as possible towards the underlying
        native functionality. For example, we do not remove or replace the native 'X' or clear
        button for type search. If you're application needs such mangling, we hope that AgnosticUI
        at least provides some helpful scaffolding to build on top of.
      </p>
      <p class="mbs24 mbe32">
        Also, unlike a
        <a href="https://css-tricks.com/no-class-css-frameworks/">classless framework</a>,
        AgnosticUI will only affect those elements where you've declaritively added our CSS hooks.
        Put differently, an email input with no AgnosticUI classes will behave and appear in an
        unadulterated fashion. If you'd like it to add AgnosticUI's general input look and feel,
        simply add the <i>input</i> class to it. Here are some examples of that.
      </p>
      <Code code={`<form>
  <AgInput class="mbe16" uniqueId="input-email" type="email" label="Email" placeholder="your.email@gmail.com" />
  <AgInput class="mbe16" uniqueId="input-password" type="password" label="Password" />
  <AgInput class="mbe16" uniqueId="input-search" type="search" label="Search" placeholder="Searchâ€¦" />
  <AgInput class="mbe16" uniqueId="input-tel" type="tel" label="Telephone" placeholder="Telephoneâ€¦" />
  <AgInput class="mbe16" uniqueId="input-number" type="number" label="Number" placeholder="Enter a numberâ€¦" min="10" max="30" step="5" />
      </form>`} lang="html" wrap />
      <div class="mbe24" />
      <form>
        <AgInput class="mbe16" uniqueId="input-email" type="email" label="Email" placeholder="your.email@gmail.com" />
        <AgInput class="mbe16" uniqueId="input-password" type="password" label="Password" />
        <AgInput class="mbe16" uniqueId="input-search" type="search" label="Search" placeholder="Searchâ€¦" />
        <AgInput class="mbe16" uniqueId="input-tel" type="tel" label="Telephone" placeholder="Telephoneâ€¦" />
        <AgInput class="mbe16" uniqueId="input-number" type="number" label="Number" placeholder="Enter a numberâ€¦" min="10" max="30" step="5" />
      </form>
      <div class="mbs24 h3 mbe24">Field Hints</div>

      <Code code={`<AgInput helpText="This is some helpful text to help the user" uniqueId="input-help-hints" label="Field hints" placeholder="Helpt hints" />
<div class="mbe16" />
<AgInput isInvalid invalidText="There's an error on this field" uniqueId="input-error-hints" label="Field hints" placeholder="Error hints" />
<div class="mbe16" />
<AgInput size="small" isInvalid invalidText="There's an error on this field" uniqueId="input-error-hints-small" label="Small" placeholder="Field hints" />
<div class="mbe16" />
<AgInput size="large" isInvalid invalidText="There's an error on this field" uniqueId="input-error-hints-large" label="Large" placeholder="Field hints" />`} lang="html" wrap />
      <div class="mbe24" />
      <AgInput helpText="This is some helpful text to help the user" uniqueId="input-help-hints" label="Field hints" placeholder="Helpt hints" />
      <div class="mbe16" />
      <AgInput isInvalid invalidText="There's an error on this field" uniqueId="input-error-hints" label="Field hints" placeholder="Error hints" />
      <div class="mbe16" />
      <AgInput size="small" isInvalid invalidText="There's an error on this field" uniqueId="input-error-hints-small" label="Small" placeholder="Field hints" />
      <div class="mbe16" />
      <AgInput size="large" isInvalid invalidText="There's an error on this field" uniqueId="input-error-hints-large" label="Large" placeholder="Field hints" />
    </HContainer>
  </BaseLayout>
  
<script is:inline src="/input-demo.js"></script>
