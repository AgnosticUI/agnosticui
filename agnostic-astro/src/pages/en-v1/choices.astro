---
import { Code } from 'astro/components';
// We can use this too but will need to go grab a CSS theme
// import { Prism } from '@astrojs/prism';

import XElement from 'astro-xelement'

import AgChoice from '../../lib/components/ChoiceInput.astro'

import BaseLayout from '../../layouts/BaseLayout.astro';

const { HContainer} = XElement;
---
  <BaseLayout>
    <div class="h3 mbs40">ChoiceInputs</div>
    <HContainer class="container">
      <p class="mbs24 mbe24">The <a href="https://github.com/agnosticui/agnosticui/agnostic-astro" target="_blank">agnostic-astro</a>
      package utilizes <a href="https://github.com/astro-community/xelement" target="_blank">XElement</a> under-the-hood in order to provide build-time
      <a href="https://docs.astro.build/en/core-concepts/astro-components/" target="_blank">Astro components</a>. These build-time components will help
      your project get closer to realizing a mostly <span class="quoted">no client-side runtime</span>â€¦if you do it right, this should mean an all-green 100% Lighthouse performance score!
      Leverage the benefits of <a href="https://docs.astro.build/en/core-concepts/partial-hydration/#island-architecture" target="_blank">Islands architecture</a>
      by sending mostly server built <a href="https://github.com/agnosticui/agnosticui/agnostic-astro" target="_blank">agnostic-astro</a> components. Then,
      sprinkle client-hydrated ones only as needed.</p>
      <div class="h4 mbe24">Usage</div>
      <p class="mbe12">Ensure you've installed and setup the <a href="https://github.com/AgnosticUI/agnosticui/tree/master/integrations/astro/agnostic-astro" target="_blank">AgnosticUI Astro integration</a>
      which will import the required <code>common.min.css</code> onto your page:
      <Code code={`npm i astro-agnosticui`} lang="bash" wrap />
      </p>
      <p class="mbs24 mbe12">Then add the integration to your <code>astro.config.mjs</code> (you may need to run Astro with experimental integrations flag <code>astro dev --experimental-integrations</code>):
        <Code code={`import { defineConfig } from 'astro/config';
import agnosticAstro from 'astro-agnosticui';;
export default defineConfig({
  integrations: [agnosticAstro()]
});`} lang="javascript" wrap />
      </p>
      <p class="mbs24 mbe12">Then you can import Astro ChoiceInput component (<code>agnostic-astro</code> ships with the <code>astro-agnosticui</code> integration):
        <Code code={`import AgChoiceInput from 'agnostic-astro/ChoiceInput.astro';`} lang="javascript" wrap />
      </p>
      <p class="mbs24 mbe12">Here's the <a href="https://github.com/AgnosticUI/agnosticui/tree/master/agnostic-astro" target="_blank">agnostic-astro</a> ChoiceInput component in use:</p>
      <Code code={`<AgChoice uniqueId="choice1" legendLabel="Choice legend label" options={
  [
    {
      name: "frequency",
      value: "daily",
      label: "Daily",
    },
    {
      name: "frequency",
      value: "weekly",
      label: "Weekly",
    },
    {
      name: "frequency",
      value: "monthly",
      label: "Monthly",
    }
  ]
} />
<AgChoice uniqueId="choice1" legendLabel="Disabled Options" disabledOptions={["monthly", "weekly"]} 
  options={
  [
    {
      name: "when",
      value: "daily",
      label: "Daily",
    },
    {
      name: "when",
      value: "weekly",
      label: "Weekly",
    },
    {
      name: "when",
      value: "monthly",
      label: "Monthly",
    },
    {
      name: "when",
      value: "yearly",
      label: "Yearly",
    }
  ]
} />
<AgChoice uniqueId="choice1" legendLabel="Prechecked Options" checkedOptions={["weekly"]} 
  options={
  [
    {
      name: "precheckedExample",
      value: "daily",
      label: "Daily",
    },
    {
      name: "precheckedExample",
      value: "weekly",
      label: "Weekly",
    }
  ]
} />

<AgChoice uniqueId="radios" legendLabel="Choice legend label (radios)" type="radio" options={
  [
    {
      name: "howOften",
      value: "daily",
      label: "Daily",
    },
    {
      name: "howOften",
      value: "weekly",
      label: "Weekly",
    },
    {
      name: "howOften",
      value: "monthly",
      label: "Monthly",
    }
  ]
} />
<!-- Consumer is responsible for passing checkedOptions as array of size one when type is radio as radios can only have
a single radio checked at any given time. Not doing so will result in results undefined ;) -->
<AgChoice uniqueId="radios" legendLabel="Choice (prechecked radio)" type="radio" checkedOptions=['weekly'] options={
  [
    {
      name: "precheckedRadio",
      value: "daily",
      label: "Daily",
    },
    {
      name: "precheckedRadio",
      value: "weekly",
      label: "Weekly",
    },
    {
      name: "precheckedRadio",
      value: "monthly",
      label: "Monthly",
    }
  ]
} />`} lang="html" wrap />
      <div class="mbe24" />
      <AgChoice uniqueId="choice1" legendLabel="Choice legend label" options={
        [
          {
            name: "frequency",
            value: "daily",
            label: "Daily",
          },
          {
            name: "frequency",
            value: "weekly",
            label: "Weekly",
          },
          {
            name: "frequency",
            value: "monthly",
            label: "Monthly",
          }
        ]
      } />
      <AgChoice uniqueId="choice1" legendLabel="Disabled Options" disabledOptions={["monthly", "weekly"]} 
       options={
        [
          {
            name: "when",
            value: "daily",
            label: "Daily",
          },
          {
            name: "when",
            value: "weekly",
            label: "Weekly",
          },
          {
            name: "when",
            value: "monthly",
            label: "Monthly",
          },
          {
            name: "when",
            value: "yearly",
            label: "Yearly",
          }
        ]
      } />
      <AgChoice uniqueId="choice1" legendLabel="Prechecked Options" checkedOptions={["monthly", "weekly"]} 
       options={
        [
          {
            name: "precheckedExample",
            value: "daily",
            label: "Daily",
          },
          {
            name: "precheckedExample",
            value: "weekly",
            label: "Weekly",
          },
          {
            name: "precheckedExample",
            value: "monthly",
            label: "Monthly",
          },
          {
            name: "precheckedExample",
            value: "yearly",
            label: "Yearly",
          }
        ]
      } />
      <AgChoice isDisabled uniqueId="disabledtest" legendLabel="Choice legend label (disabled)" options={[{
          name: 'foo',
          value: 'bar',
          label: 'disabled item'
        },{
          name: 'foo',
          value: 'baz',
          label: 'disabled item 2'

        }
      ]}/>
      <AgChoice uniqueId="radios" legendLabel="Choice legend label (radios)" type="radio" options={
        [
          {
            name: "howOften",
            value: "daily",
            label: "Daily",
          },
          {
            name: "howOften",
            value: "weekly",
            label: "Weekly",
          },
          {
            name: "howOften",
            value: "monthly",
            label: "Monthly",
          }
        ]
      } />
      <!-- Consumer is responsible for passing checkedOptions as array of size one when type is radio as radios can only have
      a single radio checked at any given time. Not doing so will result in results undefined ;) -->
      <AgChoice uniqueId="radios" legendLabel="Choice (prechecked radio)" type="radio" checkedOptions=['weekly'] options={
        [
          {
            name: "precheckedRadio",
            value: "daily",
            label: "Daily",
          },
          {
            name: "precheckedRadio",
            value: "weekly",
            label: "Weekly",
          },
          {
            name: "precheckedRadio",
            value: "monthly",
            label: "Monthly",
          }
        ]
      } />
      <AgChoice class="mbs40" uniqueId="fieldsetHidden" isFieldsetHidden={true} legendLabel="Choice legend (visually hidden)" type="radio" options={
        [
          {
            name: "fieldsetHidden",
            value: "daily",
            label: "Daily",
          },
          {
            name: "fieldsetHidden",
            value: "weekly",
            label: "Weekly",
          },
          {
            name: "fieldsetHidden",
            value: "monthly",
            label: "Monthly",
          }
        ]
      } />
      <AgChoice class="mbs40" uniqueId="inlineTest" isFieldsetHidden isInline legendLabel="Inline Example" type="radio" options={
        [
          {
            name: "inlineTest",
            value: "daily",
            label: "Daily",
          },
          {
            name: "inlineTest",
            value: "weekly",
            label: "Weekly",
          },
          {
            name: "inlineTest",
            value: "monthly",
            label: "Monthly",
          }
        ]
      } />
      <AgChoice class="mbs40" uniqueId="smallInline" size="small" isFieldsetHidden isInline legendLabel="Small" type="radio" options={
        [
          {
            name: "smallInline",
            value: "daily",
            label: "Daily",
          },
          {
            name: "smallInline",
            value: "weekly",
            label: "Weekly",
          },
          {
            name: "smallInline",
            value: "monthly",
            label: "Monthly",
          }
        ]
      } />
      <AgChoice class="mbs40" uniqueId="largeInline" size="large" isFieldsetHidden isInline legendLabel="Large" type="radio" options={
        [
          {
            name: "largeInline",
            value: "daily",
            label: "Daily",
          },
          {
            name: "largeInline",
            value: "weekly",
            label: "Weekly",
          },
          {
            name: "largeInline",
            value: "monthly",
            label: "Monthly",
          }
        ]
      } />
    </HContainer>
  </BaseLayout>
  