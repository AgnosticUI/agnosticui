---
import { Code } from 'astro/components';

import XElement from 'astro-xelement'

import AgSwitch from '../../lib/components/Switch.astro'

import BaseLayout from '../../layouts/BaseLayout.astro';

const { HContainer} = XElement;
---
  <BaseLayout>
    <div class="h3 mbs40">Switch</div>
    <HContainer class="container">
      <p class="mbs24 mbe24">The <a href="https://github.com/agnosticui/agnosticui/agnostic-astro" target="_blank">agnostic-astro</a>
      package utilizes <a href="https://github.com/astro-community/xelement" target="_blank">XElement</a> under-the-hood in order to provide build-time
      <a href="https://docs.astro.build/en/core-concepts/astro-components/" target="_blank">Astro components</a>. These build-time components will help
      your project get closer to realizing a mostly <span class="quoted">no client-side runtime</span>â€¦if you do it right, this should mean an all-green 100% Lighthouse performance score!
      Leverage the benefits of <a href="https://docs.astro.build/en/core-concepts/partial-hydration/#island-architecture" target="_blank">Islands architecture</a>
      by sending mostly server built <a href="https://github.com/agnosticui/agnosticui/agnostic-astro" target="_blank">agnostic-astro</a> components. Then,
      sprinkle client-hydrated ones only as needed.</p>
      <div class="h4 mbe24">Usage</div>
      <p class="mbe12">AgnosticUI requires the import of the <code>common.min.css</code> from your Astro base layout:
      <Code code={`import 'agnostic-css/public/css-dist/common.min.css';`} lang="javascript" wrap />
      </p>
      <p class="mbs24 mbe12">Then you can import Astro Switch component:
      <Code code={`import AgSwitch from 'agnostic-astro/Switch.astro';`} lang="javascript" wrap />
      </p>
      <p class="mbs24 mbe12">Here's the <a href="https://github.com/AgnosticUI/agnosticui/tree/master/agnostic-astro" target="_blank">agnostic-astro</a> Switch component in use:</p>
      <Code code={`<form>
  <AgSwitch uniqueId="switch-2" label="Small" size="small" />
  <AgSwitch uniqueId="switch-1" label="Default switch" />
  <AgSwitch uniqueId="switch-2" label="Large" size="large" />
  <AgSwitch uniqueId="switch-1" label="Bordered" isBordered />
  <AgSwitch uniqueId="switch-1" label="Action" isAction />
  <AgSwitch uniqueId="switch-1" label="Action Bordered" isBordered isAction />
  <AgSwitch uniqueId="switch-1" label="Label on Right" isLabelRight />
</form>
<script>
// In React, Vue, or Svelte we don't need the data attribute and just
// scope this to the component without having to query all in the DOM
// But for agnostic-astro you will want to do something similar as I have here
const switchesElements = document.querySelectorAll('[data-agnostic-switch]')
const handleClickEvent = (evt) => {
  const el = evt.target
  if (el.getAttribute('aria-checked') == 'true') {
    el.setAttribute('aria-checked', 'false')
  } else {
    el.setAttribute('aria-checked', 'true')
  }
}
for (let i = 0; i < switchesElements.length; i++) {
  switchesElements[i].addEventListener('click', handleClickEvent)

  switchesElements[i].addEventListener('keypress', function (ev) {
    const keyCode = ev.keyCode || ev.which
    switch (keyCode) {
      case 13:
        ev.preventDefault()
        ev.target.click()
        break
    }
  })
}
</script>

`} lang="html" wrap />
      <div class="mbe24" />
      <form>
        <AgSwitch uniqueId="switch-2" label="Small" size="small" />
        <AgSwitch uniqueId="switch-1" label="Default switch" />
        <AgSwitch uniqueId="switch-2" label="Large" size="large" />
        <AgSwitch uniqueId="switch-1" label="Bordered" isBordered />
        <AgSwitch uniqueId="switch-1" label="Action" isAction />
        <AgSwitch uniqueId="switch-1" label="Action Bordered" isBordered isAction />
        <AgSwitch uniqueId="switch-1" label="Label on Right" isLabelRight />
      </form>
    </HContainer>
  </BaseLayout>
  
<script is:inline src="/switch-demo.js"></script>
