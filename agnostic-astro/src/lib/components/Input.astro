---
import 'agnostic-css/src/components/input/input.css';
import 'agnostic-css/src/components/input/inputaddonitem.css';

import XElement from 'astro-xelement'
import { pluckClassesFromAttrs } from '../../shared/pluckClassesFromAttrs';

export interface Props {
  uniqueId: string;
  size?: 'small' | 'large';
  label: string;
  isInvalid?: boolean;
  invalidText?: boolean;
  helpText?: boolean;
  hasLeftAddon?: boolean;
  hasRightAddon?: boolean;
  isRounded?: boolean;
  isInlined?: boolean;
  isUnderlined?: boolean;
  isUnderlinedBackground?: boolean;
  isLabelHidden?: boolean;
  // Subset of input types e.g. this component shouldn't support button, color, or checkbox as those
  // are either covered in other components and/or a completely different UI from an "input" field
  type?: 'date' | 'datetime-local' | 'email' | 'month' | 'number' | 'password' | 'search' | 'tel' | 'text' | 'time' | 'url' | 'week';
}
// Note that as we support isInlined we need to switch from block display
// to flex-inline items-center for that case. It does couple us to some
// global utilities.
const {
  uniqueId,
  size,
  label,
  isInvalid = false,
  invalidText,
  helpText,
  hasLeftAddon = false,
  hasRightAddon = false,
  isRounded = false,
  isInlined = false,
  isUnderlined = false,
  isUnderlinedBackground = false,
  isLabelHidden = false,
  type = "text",
  ...attrs
} = Astro.props as Props;

const { input: AgInputNative, div: AgInput} = XElement;
const { additionalClassList } = pluckClassesFromAttrs(attrs);
---

<AgInput class={isInlined ? 'flex-inline items-center' : undefined}>
  <label class=`label ${isInlined ? 'label-inline' : ''}
    ${isLabelHidden ? 'screenreader-only' : ''}` for={`${uniqueId}`}>{label}</label>
  {hasLeftAddon || hasRightAddon ? (
    <div class="input-addon-container">
      <slot name="addon-left" />
      <AgInputNative
        id={`${uniqueId}`}
        name={uniqueId}
        class:list={[
          'input',
          {
            'input-rounded': isRounded ? true : false,
            'input-underlined': isUnderlined ? true : false,
            'input-underlined-bg': isUnderlinedBackground ? true : false,
            'input-small': size === 'small' ? true : false,
            'input-large': size === 'large' ? true : false,
            'input-has-left-addon': hasLeftAddon ? true : false,
            'input-has-right-addon': hasRightAddon ? true : false,
            'input-inline': isInlined ? true : false,
          },
          additionalClassList,
        ]}
        {...attrs}
      />
      <slot name="addon-right" />
    </div>
  ) : (
    <AgInputNative
      id={`${uniqueId}`}
      name={uniqueId}
      type={type}
      class:list={[
        'input',
        {
          'input-rounded': isRounded ? true : false,
          'input-underlined': isUnderlined ? true : false,
          'input-underlined-bg': isUnderlinedBackground ? true : false,
          'input-small': size === 'small' ? true : false,
          'input-large': size === 'large' ? true : false,
          'input-has-left-addon': hasLeftAddon ? true : false,
          'input-has-right-addon': hasRightAddon ? true : false,
          'input-inline': isInlined ? true : false,
          'input-error': isInvalid ? true : false,
        },
        additionalClassList,
      ]}
      {...attrs}
    />
  )}
  {isInvalid && (
    <span
      role="status"
      aria-live="polite"
      class:list={[
        {
          'field-error': !size ? true : false,
          'field-error-small': size === 'small' ? true : false,
          'field-error-large': size === 'large' ? true : false,
        }
      ]}
    >{invalidText}</span>
  )}
  {(!isInvalid && helpText) && (
    <span
      class:list={[
        {
          'field-help': !size ? true : false,
          'field-help-small': size === 'small' ? true : false,
          'field-help-large': size === 'large' ? true : false,
        }
      ]}
    >{helpText}</span>
  )}
</AgInput>
