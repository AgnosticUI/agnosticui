{"version":3,"file":"tabs.component.js","sourceRoot":"","sources":["../../../../../libs/ag/src/lib/tabs.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAEL,SAAS,EACT,eAAe,EACf,SAAS,EAET,uBAAuB,EACvB,KAAK,EACL,YAAY,EACZ,MAAM,EACN,YAAY,GACb,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,iBAAiB,EAAE,MAAM,uBAAuB,CAAC;;;AA2C1D,MAAM,OAAO,aAAa;IA1C1B;QA6CW,SAAI,GAAY,EAAE,CAAC;QAEnB,eAAU,GAAa,KAAK,CAAC;QAC7B,cAAS,GAAa,IAAI,CAAC;QAC3B,iBAAY,GAAa,KAAK,CAAC;QAoBxC,qBAAgB,GAAG,IAAI,YAAY,EAAE,CAAC;KAiBvC;IAfC,kBAAkB;QAChB,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAChE,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;YAC3B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;SACxC;IACH,CAAC;IAED,WAAW,CAAC,QAA2B;QAErC,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;YACvC,GAAG,CAAC,QAAQ,GAAG,KAAK,CAAC;QACvB,CAAC,CAAC,CAAC;QACH,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC;QACzB,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACvC,CAAC;;0GA3CU,aAAa;8FAAb,aAAa,mXACP,iBAAiB,6BAzCxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoCT;2FAIU,aAAa;kBA1CzB,SAAS;mBAAC;oBACT,QAAQ,EAAE,SAAS;oBACnB,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoCT;oBACD,SAAS,EAAE,CAAC,YAAY,CAAC;oBACzB,eAAe,EAAE,uBAAuB,CAAC,MAAM;iBAChD;8BAEqC,SAAS;sBAA5C,eAAe;uBAAC,iBAAiB;gBAEzB,IAAI;sBAAZ,KAAK;gBACG,eAAe;sBAAvB,KAAK;gBACG,UAAU;sBAAlB,KAAK;gBACG,SAAS;sBAAjB,KAAK;gBACG,YAAY;sBAApB,KAAK;gBAiBN,iBAAiB;sBADhB,YAAY;uBAAC,mBAAmB;gBAIjC,gBAAgB;sBADf,MAAM","sourcesContent":["import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  QueryList,\n  TemplateRef,\n  ChangeDetectionStrategy,\n  Input,\n  ContentChild,\n  Output,\n  EventEmitter,\n} from '@angular/core';\nimport { TabPanelComponent } from './tab-panel.component';\n@Component({\n  selector: 'ag-tabs',\n  template: `\n    <div\n      [class.tab-list]=\"isSkinned === true\"\n      [class.tab-list-base]=\"isSkinned === false\"\n      [class.tab-borderless]=\"isBorderless === true\"\n      role=\"tablist\"\n      aria-label=\"Tabs\"\n    >\n      <div\n        *ngFor=\"let panel of tabPanels; index as i\"\n        (click)=\"selectPanel(panel)\"\n      >\n        <ng-container *ngIf=\"!tabButtonTemplate\">\n          <button\n            role=\"tab\"\n            class=\"tab-item tab-button\"\n            [class.active]=\"panel.isActive\"\n            [attr.disabled]=\"\n              isDisabled || disabledOptions?.includes(panel.title) ? true : null\n            \"\n            [class.tab-button-large]=\"size === 'large'\"\n            [class.tab-button-jumbo]=\"size === 'jumbo'\"\n            [attr.aria-selected]=\"panel.isActive\"\n          >\n            {{ panel.title }}\n          </button>\n        </ng-container>\n        <ng-container\n          *ngIf=\"tabButtonTemplate\"\n          [ngTemplateOutlet]=\"tabButtonTemplate\"\n          [ngTemplateOutletContext]=\"{ $implicit: panel, index: i }\"\n        >\n        </ng-container>\n      </div>\n    </div>\n    <ng-content></ng-content>\n  `,\n  styleUrls: ['./tabs.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabsComponent implements AfterContentInit {\n  @ContentChildren(TabPanelComponent) tabPanels!: QueryList<TabPanelComponent>;\n\n  @Input() size?: string = '';\n  @Input() disabledOptions?: string[];\n  @Input() isDisabled?: boolean = false;\n  @Input() isSkinned?: boolean = true;\n  @Input() isBorderless?: boolean = false;\n\n  /**\n   * This is used to allow consumer to provide their own custom tab buttons like:\n   * <ng-template #tabButtonTemplate let-tab let-index>\n      <ag-button\n        type=\"faux\"\n        [isBordered]=\"true\"\n        mode=\"primary\"\n        role=\"tab\"\n        [attr.aria-selected]=\"tab.isActive\"\n      >\n        {{ tab.title }}\n      </ag-button>\n    </ng-template>\n  */\n  @ContentChild('tabButtonTemplate')\n  tabButtonTemplate: TemplateRef<any> | undefined;\n\n  @Output()\n  selectionChanged = new EventEmitter();\n\n  ngAfterContentInit() {\n    const activeTabs = this.tabPanels.filter((tab) => tab.isActive);\n    if (activeTabs.length === 0) {\n      this.selectPanel(this.tabPanels.first);\n    }\n  }\n\n  selectPanel(tabPanel: TabPanelComponent) {\n    // First deactivate all tabs, then select passed in tab\n    this.tabPanels.toArray().forEach((tab) => {\n      tab.isActive = false;\n    });\n    tabPanel.isActive = true;\n    this.selectionChanged.emit(tabPanel);\n  }\n}\n"]}