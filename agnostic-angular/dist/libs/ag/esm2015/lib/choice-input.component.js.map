{"version":3,"file":"choice-input.component.js","sourceRoot":"","sources":["../../../../../libs/ag/src/lib/choice-input.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  Input,\n  ChangeDetectionStrategy,\n  Output,\n  EventEmitter,\n} from '@angular/core';\n\n@Component({\n  selector: 'ag-choice-input',\n  template: `<fieldset [ngClass]=\"fieldsetClass()\">\n    <legend [ngClass]=\"legendClasses()\">{{ legendLabel }}</legend>\n    <ng-container *ngFor=\"let option of options\">\n      <label\n        [attr.disabled]=\"isDisabled || disabledOptions?.includes(option.value)\"\n        [ngClass]=\"labelClasses()\"\n      >\n        <input\n          [ngClass]=\"inputClasses()\"\n          [type]=\"type\"\n          [name]=\"option.name\"\n          [value]=\"option.value\"\n          [disabled]=\"isDisabled || disabledOptions?.includes(option.value)\"\n          [checked]=\"checkedOptions?.includes(option.value) || false\"\n          (change)=\"this.handleChange($event)\"\n        />\n        <span [ngClass]=\"labelSpanClasses()\">{{ option.label }}</span>\n      </label>\n    </ng-container>\n  </fieldset>`,\n  styleUrls: ['./choice-input.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ChoiceInputComponent {\n  @Input() isInline?: boolean = false;\n  @Input() isFieldset?: boolean = true;\n  @Input() isSkinned?: boolean = true;\n  @Input() isDisabled?: boolean = false;\n  @Input() options?: any[] = [];\n  @Input() disabledOptions?: string[];\n\n  private _checkedOptions: any[] = [];\n  get checkedOptions(): any[] {\n    return this._checkedOptions;\n  }\n  @Input()\n  set checkedOptions(val: any[]) {\n    this._checkedOptions = val;\n  }\n\n  @Input() css?: string;\n  @Input() legendLabel = '';\n  @Input() type: 'radio' | 'checkbox' = 'checkbox';\n  // Medium is default so we just use empty string\n  @Input() size: 'small' | 'large' | '' = '';\n  // TODO type this\n  @Output() selected = new EventEmitter<any>();\n\n  labelSpanClasses() {\n    let klasses = [\n      this.type ? `${this.type}-label` : '',\n      this.size ? `${this.type}-label-${this.size}` : '',\n    ];\n    klasses = klasses.filter((klass) => klass.length);\n    return klasses.join(' ');\n  }\n  handleChange(ev: Event) {\n    const el = ev.target as HTMLInputElement;\n    const value = el.value;\n    if (this.type === 'checkbox') {\n      let checkedItemsUpdated;\n      if (this.checkedOptions?.includes(value)) {\n        checkedItemsUpdated = this.checkedOptions?.filter(\n          (item) => item !== value\n        );\n        this.checkedOptions = checkedItemsUpdated;\n      } else {\n        checkedItemsUpdated = [...this.checkedOptions, value];\n        this.checkedOptions = checkedItemsUpdated;\n      }\n      this.selected.emit(checkedItemsUpdated);\n    } else {\n      // Type is radio. We ignore if they're trying to check the currently checked\n      if (this.checkedOptions?.includes(value)) {\n        // Since you can only have one checked radio at a time, we simply\n        // set to the new radio to be checked\n        this.checkedOptions = [value];\n        this.selected.emit(this.checkedOptions);\n      }\n    }\n  }\n  inputClasses() {\n    let inputKlasses = [\n      `${this.type}`,\n      this.size ? `${this.size}` : '',\n      this.isDisabled ? 'disabled' : '',\n    ];\n    inputKlasses = inputKlasses.filter((klass) => klass.length);\n    return inputKlasses.join(' ');\n  }\n  fieldsetClass() {\n    // If consumer sets is skinned to false we don't style the fieldset\n    const skin = this.isSkinned ? `${this.type}-group` : '';\n\n    // we only add the fieldset class for large (not small) e.g. radio|checkbox-group-large\n    const sizeSkin =\n      this.isSkinned && this.size === 'large'\n        ? `${this.type}-group-${this.size}`\n        : '';\n\n    const overrides = this.css ? `${this.css}` : '';\n    const klasses = [\n      overrides ? overrides : '',\n      skin,\n      sizeSkin,\n      this.isFieldset === false ? `${this.type}-group-hidden` : '',\n    ];\n    return klasses.filter((klass) => klass.length);\n  }\n  legendClasses() {\n    const skin = this.isSkinned ? `${this.type}-legend` : '';\n    const klasses = [\n      skin,\n      // .screenreader-only is expected to be globally available via common.min.css\n      this.isFieldset === false ? 'screenreader-only' : null,\n    ];\n    return klasses.join(' ');\n  }\n  labelClasses() {\n    let klasses = [\n      this.type ? `${this.type}-label-wrap` : '',\n      this.isInline ? `${this.type}-label-wrap-inline` : '',\n    ];\n    klasses = klasses.filter((klass) => klass.length);\n    return klasses.join(' ');\n  }\n}\n"]}