{"version":3,"file":"table.component.js","sourceRoot":"","sources":["../../../../../libs/ag/src/lib/table.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Input,\n  ChangeDetectionStrategy,\n  Component,\n  TemplateRef,\n  ViewChild,\n  OnInit,\n} from '@angular/core';\nimport { combineLatest, BehaviorSubject } from 'rxjs';\n\nexport interface TableHeaderCell {\n  label: string;\n  key: string;\n  sortable?: boolean;\n  width?: string;\n  /**\n   * Custom sorting `compareFunction` which will take the values from the\n   * two respective row cells being compared.\n   * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#description\n   */\n  sortFn?: (cellLeft: any, cellRight: any) => -1 | 0 | 1;\n}\n\n@Component({\n  selector: 'ag-table',\n  template: `<div [class]=\"tableResponsiveClasses\">\n    <table [class]=\"tableClasses\">\n      <caption [class]=\"captionClasses\">\n        {{\n          caption\n        }}\n      </caption>\n      <thead>\n        <tr>\n          <th\n            *ngFor=\"let headerCol of headers\"\n            [attr.aria-sort]=\"getSortDirectionFor(headerCol.key)\"\n            scope=\"col\"\n            [style.width]=\"headerCol.width ? headerCol.width : 'auto'\"\n          >\n            <div\n              class=\"table-header-container\"\n              *ngIf=\"headerCol.sortable; else unsortable\"\n            >\n              <span class=\"table-sort-label\">{{ headerCol.label }}</span>\n              <button\n                type=\"button\"\n                class=\"table-sort\"\n                (click)=\"handleSortClicked(headerCol.key)\"\n              >\n                <span class=\"screenreader-only\">{{ headerCol.label }}</span>\n                <span [class]=\"getSortingClassesFor(headerCol.key)\"></span>\n              </button>\n            </div>\n            <ng-template #unsortable>\n              {{ headerCol.label }}\n            </ng-template>\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr *ngFor=\"let row of rows$ | async; index as i\">\n          <td\n            *ngFor=\"\n              let col of row | keyvalue: preserveOriginalOrder;\n              index as cIndex\n            \"\n          >\n            <ng-template #defaultRow>\n              {{ getColByName(row, col.key) }}\n            </ng-template>\n            <ng-container\n              [ngTemplateOutlet]=\"\n                rowRenderTemplate ? rowRenderTemplate : defaultRow\n              \"\n              [ngTemplateOutletContext]=\"{\n                $implicit: getColByName(row, col.key),\n                index: cIndex\n              }\"\n            >\n            </ng-container>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>`,\n  styleUrls: ['./table.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TableComponent implements OnInit {\n  /**\n   * If consumer passes rowRenderTemplate, we project into td cell's template outlet.\n   */\n  @Input()\n  public rowRenderTemplate?: TemplateRef<any>;\n\n  @Input() headers!: TableHeaderCell[];\n  @Input() rows!: any[];\n  @Input() caption!: string;\n  @Input() captionPosition?: 'top' | 'bottom' | 'end' | 'hidden' = 'hidden';\n  @Input() isUppercasedHeaders?: boolean = false;\n  @Input() isBordered?: boolean = false;\n  @Input() isBorderless?: boolean = false;\n  @Input() isStriped?: boolean = false;\n  @Input() isHoverable?: boolean = false;\n  @Input() isStacked?: boolean = false;\n  @Input() tableSize?: '' | 'small' | 'large' | 'xlarge' = '';\n  @Input() responsiveSize?: '' | 'small' | 'medium' | 'large' | 'xlarge';\n\n  /**\n   * This keeps our reactively sorted rows; reacts to changes made to\n   * sortingKey$ or direction$ below.\n   */\n  public rows$;\n  private sortingKey$ = new BehaviorSubject<string>('');\n  private direction$ = new BehaviorSubject<'none' | 'ascending' | 'descending'>(\n    'none'\n  );\n\n  constructor() {\n    this.rows$ = new BehaviorSubject<any[]>(this.rows);\n  }\n\n  /**\n   * Using keyvalue by default with sort our columns alphabetically and we\n   * want to preserve the original ordering of Object.keys(A_ROW_OBJECT)\n   * *ngFor=\"let col of row | keyvalue: preserveOriginalOrder;\n   */\n  preserveOriginalOrder = (a: any, b: any) => {\n    return a;\n  };\n\n  getColByName = (row: any, name: any) => {\n    return row[name];\n  }\n  /**\n   * This function first checks if there is a corresponding custom sort function\n   * that was supplied in a header cell with key\" of `sortingKey` named `.sortFn`\n   * per the API. If it finds, it will delegate to that for actual sort comparison.\n   * Otherwise, the function supplies its own fallback default (naive) sorting logic.\n   */\n  internalSort(rowLeft: any, rowRight: any) {\n    /**\n     * Pluck out our columns so we can compare.\n     */\n    let colLeft =\n      rowLeft[this.sortingKey$.value] === null ||\n        rowLeft[this.sortingKey$.value] === undefined\n        ? -Infinity\n        : rowLeft[this.sortingKey$.value];\n    let colRight =\n      rowRight[this.sortingKey$.value] === null ||\n        rowRight[this.sortingKey$.value] === undefined\n        ? -Infinity\n        : rowRight[this.sortingKey$.value];\n\n    /**\n     * Check if corresponding header cell has a custom sort method. If so,\n     * we use that. Otherwise, we proceed with our default sort implementation.\n     */\n    const headerWithCustomSortFunction = this.headers.find(\n      (h) => h.key === this.sortingKey$.value && !!h.sortFn\n    );\n    if (headerWithCustomSortFunction && headerWithCustomSortFunction.sortFn) {\n      return headerWithCustomSortFunction.sortFn(colLeft, colRight);\n    }\n\n    /**\n     * No custom sort method for the header cell, so we continue with our own fallback.\n     * Strings converted to lowercase; dollar currency etc. stripped (not yet i18n safe!)\n     */\n    colLeft =\n      typeof colLeft === 'string'\n        ? colLeft.toLowerCase().replace(/(^\\$|,)/g, '')\n        : colLeft;\n\n    colRight =\n      typeof colRight === 'string'\n        ? colRight.toLowerCase().replace(/(^\\$|,)/g, '')\n        : colRight;\n\n    /**\n     * If the raw value represents a number, explicitly set it to a Number\n     */\n    colLeft = !Number.isNaN(Number(colLeft)) ? Number(colLeft) : colLeft;\n    colRight = !Number.isNaN(Number(colRight)) ? Number(colRight) : colRight;\n\n    if (colLeft > colRight) {\n      return 1;\n    }\n    if (colLeft < colRight) {\n      return -1;\n    }\n    return 0;\n  }\n\n  // Just flips the sign of results of an ascending sort (internalSort)\n  descendingSort(row1: any, row2: any) {\n    return this.internalSort(row1, row2) * -1;\n  }\n\n  ngOnInit() {\n    /**\n     * Listens for any changes to our sorting key (which table header was last clicked), and\n     * the sort direction (asc, desc, none). Then sorts and places results in this.row$.next\n     */\n    combineLatest([this.sortingKey$, this.direction$]).subscribe((value) => {\n      let rows = [...this.rows];\n      const [_, direction] = value;\n      if (direction === 'ascending') {\n        rows.sort((a, b) => this.internalSort(a, b));\n      } else if (direction === 'descending') {\n        rows.sort((a, b) => this.descendingSort(a, b));\n      } else {\n        rows = [...this.rows];\n      }\n      this.rows$.next(rows);\n    });\n  }\n\n  handleSortClicked(headerKey: string) {\n    /**\n     * User's clicked a different header cell, so we change the sorting key\n     * and set the initial direction to 'none'\n     */\n    if (this.sortingKey$.value !== headerKey) {\n      this.direction$.next('none');\n      this.sortingKey$.next(headerKey);\n    }\n\n    switch (this.direction$.value) {\n      case 'ascending':\n        this.direction$.next('descending');\n        break;\n      case 'descending':\n        this.direction$.next('none');\n        break;\n      case 'none':\n        this.direction$.next('ascending');\n        break;\n      default:\n        /* eslint-disable-next-line no-console */\n        console.warn(\n          'Table sorting only supports directions: ascending | descending | none'\n        );\n    }\n  }\n\n  getSortingClassesFor(headerKey: string) {\n    // If it's the header currently being sorting on, add direction-based classes\n    if (this.sortingKey$.value === headerKey) {\n      return [\n        'icon-sort',\n        this.direction$.value !== 'none'\n          ? `icon-sort-${this.direction$.value}`\n          : '',\n      ]\n        .filter((c) => c.length)\n        .join(' ');\n    }\n    return 'icon-sort';\n  }\n\n  getSortDirectionFor(headerKey: string) {\n    if (this.sortingKey$.value !== headerKey) {\n      return 'none';\n    } else {\n      return this.direction$.value;\n    }\n  }\n\n  public get captionClasses() {\n    return [\n      this.captionPosition === 'hidden' ? 'screenreader-only' : '',\n      this.captionPosition !== 'hidden'\n        ? `caption-${this.captionPosition}`\n        : '',\n    ]\n      .filter((cl) => cl)\n      .join(' ');\n  }\n\n  public get tableResponsiveClasses(): string {\n    return this.responsiveSize\n      ? `table-responsive-${this.responsiveSize}`\n      : 'table-responsive';\n  }\n\n  public get tableClasses(): string {\n    return [\n      'table',\n      this.tableSize ? `table-${this.tableSize}` : '',\n      this.isUppercasedHeaders ? 'table-caps' : '',\n      this.isBordered ? 'table-bordered' : '',\n      this.isBorderless ? 'table-borderless' : '',\n      this.isStriped ? 'table-striped' : '',\n      this.isHoverable ? 'table-hoverable' : '',\n      this.isStacked ? 'table-stacked' : '',\n    ]\n      .filter((cl) => cl)\n      .join(' ');\n  }\n}\n"]}