import { AfterContentInit, ElementRef, EventEmitter, NgZone, OnDestroy, OnInit } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { MenuContentDirective } from './menu-content.directive';
import { MenuItemDirective } from './menu-item.directive';
import { MenuBase } from './menu.types';
import * as i0 from "@angular/core";
export declare class MenuComponent implements MenuBase, AfterContentInit, OnInit, OnDestroy {
    #private;
    private ngZone;
    private hostEl;
    private _doc?;
    closeOnSelect: boolean;
    closeOnClickOutside: boolean;
    icon: string;
    isBordered: boolean;
    isRounded: boolean;
    id?: string;
    menuTitle: string;
    size: 'small' | 'large' | undefined | null | '';
    triggerClick: EventEmitter<MouseEvent>;
    private triggerEl;
    content: MenuContentDirective;
    private menuItemEls;
    _isExpanded$: BehaviorSubject<boolean>;
    get isExpanded(): boolean;
    constructor(ngZone: NgZone, hostEl: ElementRef, _doc?: Document | undefined);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngAfterContentInit(): void;
    onTriggerClick(event: MouseEvent): void;
    handleItemClick(): void;
    toggle(): void;
    close(): void;
    open(): void;
    findChildHandleFocus(ev: KeyboardEvent, menuItem: MenuItemDirective): void;
    onTriggerKeyUp(ev: KeyboardEvent): void;
    private handleMenuItemKeyDown;
    focusMenuItem(index: number, direction?: string): void;
    private handleOutsideClicks;
    private isInside;
    private getSelectedMenuItemIndex;
    static ɵfac: i0.ɵɵFactoryDeclaration<MenuComponent, [null, null, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MenuComponent, "ag-menu", never, { "closeOnSelect": "closeOnSelect"; "closeOnClickOutside": "closeOnClickOutside"; "icon": "icon"; "isBordered": "isBordered"; "isRounded": "isRounded"; "id": "id"; "menuTitle": "menuTitle"; "size": "size"; }, { "triggerClick": "triggerClick"; }, ["content", "menuItemEls"], never>;
}
